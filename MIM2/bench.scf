module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  memref.global @arr : memref<65536xi32> = uninitialized
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c32 = arith.constant 32 : index
    %c1 = arith.constant 1 : index
    %c65536 = arith.constant 65536 : index
    %c1024 = arith.constant 1024 : index
    %c513_i32 = arith.constant 513 : i32
    %c769_i32 = arith.constant 769 : i32
    %c768_i32 = arith.constant 768 : i32
    %c512_i32 = arith.constant 512 : i32
    %c384_i32 = arith.constant 384 : i32
    %c256_i32 = arith.constant 256 : i32
    %c128_i32 = arith.constant 128 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.index_cast %arg0 : i32 to index
    %1 = memref.get_global @arr : memref<65536xi32>
    %2 = scf.for %arg1 = %0 to %c32 step %c1 iter_args(%arg2 = %c0_i32) -> (i32) {
      %3 = scf.for %arg3 = %arg1 to %c65536 step %c1024 iter_args(%arg4 = %arg2) -> (i32) {
        %4 = arith.index_cast %arg3 : index to i32
        %5 = memref.load %1[%arg3] : memref<65536xi32>
        %6 = arith.addi %arg4, %5 : i32
        %7 = arith.addi %4, %c128_i32 : i32
        %8 = arith.index_cast %7 : i32 to index
        %9 = memref.load %1[%8] : memref<65536xi32>
        %10 = arith.addi %6, %9 : i32
        %11 = arith.addi %4, %c256_i32 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = memref.load %1[%12] : memref<65536xi32>
        %14 = arith.addi %10, %13 : i32
        %15 = arith.addi %4, %c384_i32 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = memref.load %1[%16] : memref<65536xi32>
        %18 = arith.addi %14, %17 : i32
        %19 = arith.addi %4, %c512_i32 : i32
        %20 = arith.index_cast %19 : i32 to index
        %21 = memref.load %1[%20] : memref<65536xi32>
        %22 = arith.addi %18, %21 : i32
        %23 = arith.addi %4, %c513_i32 : i32
        %24 = arith.index_cast %23 : i32 to index
        %25 = memref.load %1[%24] : memref<65536xi32>
        %26 = arith.addi %22, %25 : i32
        %27 = arith.addi %4, %c768_i32 : i32
        %28 = arith.index_cast %27 : i32 to index
        %29 = memref.load %1[%28] : memref<65536xi32>
        %30 = arith.addi %26, %29 : i32
        %31 = arith.addi %4, %c769_i32 : i32
        %32 = arith.index_cast %31 : i32 to index
        %33 = memref.load %1[%32] : memref<65536xi32>
        %34 = arith.addi %30, %33 : i32
        scf.yield %34 : i32
      }
      scf.yield %3 : i32
    }
    return %2 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.undef : i32
    %1 = llvm.mlir.addressof @str0 : !llvm.ptr
    %2 = llvm.getelementptr %1[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %3 = llvm.call @printf(%2, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
