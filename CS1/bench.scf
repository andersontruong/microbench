module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %true = arith.constant true
    %false = arith.constant false
    %c5_i32 = arith.constant 5 : i32
    %c3_i32 = arith.constant 3 : i32
    %c4_i32 = arith.constant 4 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %c10_i32 = arith.constant 10 : i32
    %c64_i32 = arith.constant 64 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.addi %arg0, %c64_i32 : i32
    %1 = arith.index_cast %0 : i32 to index
    %2 = scf.for %arg1 = %c0 to %1 step %c1 iter_args(%arg2 = %c0_i32) -> (i32) {
      %3:2 = scf.while (%arg3 = %arg0, %arg4 = %arg2) : (i32, i32) -> (i32, i32) {
        %4:3 = scf.execute_region -> (i1, i32, i32) {
          %5 = arith.cmpi slt, %arg3, %c10_i32 : i32
          cf.cond_br %5, ^bb1, ^bb6(%false, %arg3, %arg4 : i1, i32, i32)
        ^bb1:  // pred: ^bb0
          cf.switch %arg3 : i32, [
            default: ^bb5(%arg4 : i32),
            0: ^bb4,
            1: ^bb3(%arg4, %c4_i32, %c4_i32 : i32, i32, i32),
            2: ^bb2(%arg4, %c4_i32, %c3_i32 : i32, i32, i32),
            3: ^bb3(%arg4, %c2_i32, %c4_i32 : i32, i32, i32),
            4: ^bb2(%arg4, %c3_i32, %c5_i32 : i32, i32, i32),
            5: ^bb3(%arg4, %c2_i32, %c3_i32 : i32, i32, i32),
            6: ^bb2(%arg4, %c3_i32, %c2_i32 : i32, i32, i32),
            7: ^bb2(%arg4, %c1_i32, %c2_i32 : i32, i32, i32),
            8: ^bb2(%arg4, %c2_i32, %c3_i32 : i32, i32, i32),
            9: ^bb2(%arg4, %c1_i32, %c1_i32 : i32, i32, i32)
          ]
        ^bb2(%6: i32, %7: i32, %8: i32):  // 6 preds: ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1
          %9 = arith.subi %6, %7 : i32
          %10 = arith.ori %9, %8 : i32
          cf.br ^bb5(%10 : i32)
        ^bb3(%11: i32, %12: i32, %13: i32):  // 3 preds: ^bb1, ^bb1, ^bb1
          %14 = arith.addi %11, %12 : i32
          %15 = arith.ori %14, %13 : i32
          cf.br ^bb5(%15 : i32)
        ^bb4:  // pred: ^bb1
          %16 = arith.addi %arg4, %c1_i32 : i32
          %17 = arith.ori %16, %c2_i32 : i32
          cf.br ^bb5(%17 : i32)
        ^bb5(%18: i32):  // 4 preds: ^bb1, ^bb2, ^bb3, ^bb4
          %19 = arith.addi %arg3, %c1_i32 : i32
          cf.br ^bb6(%true, %19, %18 : i1, i32, i32)
        ^bb6(%20: i1, %21: i32, %22: i32):  // 2 preds: ^bb0, ^bb5
          scf.yield %20, %21, %22 : i1, i32, i32
        }
        scf.condition(%4#0) %4#1, %4#2 : i32, i32
      } do {
      ^bb0(%arg3: i32, %arg4: i32):
        scf.yield %arg3, %arg4 : i32, i32
      }
      scf.yield %3#1 : i32
    }
    return %2 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %c0_i32 = arith.constant 0 : i32
    %c64_i32 = arith.constant 64 : i32
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c5_i32 = arith.constant 5 : i32
    %false = arith.constant false
    %true = arith.constant true
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c10000_i32 = arith.constant 10000 : i32
    %0 = llvm.mlir.undef : i32
    %1 = arith.andi %arg0, %c10000_i32 : i32
    %2 = arith.addi %1, %c64_i32 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = scf.for %arg2 = %c0 to %3 step %c1 iter_args(%arg3 = %c0_i32) -> (i32) {
      %8:2 = scf.while (%arg4 = %1, %arg5 = %arg3) : (i32, i32) -> (i32, i32) {
        %9:3 = scf.execute_region -> (i1, i32, i32) {
          %10 = arith.cmpi slt, %arg4, %c10_i32 : i32
          cf.cond_br %10, ^bb1, ^bb6(%false, %arg4, %arg5 : i1, i32, i32)
        ^bb1:  // pred: ^bb0
          cf.switch %arg4 : i32, [
            default: ^bb5(%arg5 : i32),
            0: ^bb4,
            1: ^bb3(%arg5, %c4_i32, %c4_i32 : i32, i32, i32),
            2: ^bb2(%arg5, %c4_i32, %c3_i32 : i32, i32, i32),
            3: ^bb3(%arg5, %c2_i32, %c4_i32 : i32, i32, i32),
            4: ^bb2(%arg5, %c3_i32, %c5_i32 : i32, i32, i32),
            5: ^bb3(%arg5, %c2_i32, %c3_i32 : i32, i32, i32),
            6: ^bb2(%arg5, %c3_i32, %c2_i32 : i32, i32, i32),
            7: ^bb2(%arg5, %c1_i32, %c2_i32 : i32, i32, i32),
            8: ^bb2(%arg5, %c2_i32, %c3_i32 : i32, i32, i32),
            9: ^bb2(%arg5, %c1_i32, %c1_i32 : i32, i32, i32)
          ]
        ^bb2(%11: i32, %12: i32, %13: i32):  // 6 preds: ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1
          %14 = arith.subi %11, %12 : i32
          %15 = arith.ori %14, %13 : i32
          cf.br ^bb5(%15 : i32)
        ^bb3(%16: i32, %17: i32, %18: i32):  // 3 preds: ^bb1, ^bb1, ^bb1
          %19 = arith.addi %16, %17 : i32
          %20 = arith.ori %19, %18 : i32
          cf.br ^bb5(%20 : i32)
        ^bb4:  // pred: ^bb1
          %21 = arith.addi %arg5, %c1_i32 : i32
          %22 = arith.ori %21, %c2_i32 : i32
          cf.br ^bb5(%22 : i32)
        ^bb5(%23: i32):  // 4 preds: ^bb1, ^bb2, ^bb3, ^bb4
          %24 = arith.addi %arg4, %c1_i32 : i32
          cf.br ^bb6(%true, %24, %23 : i1, i32, i32)
        ^bb6(%25: i1, %26: i32, %27: i32):  // 2 preds: ^bb0, ^bb5
          scf.yield %25, %26, %27 : i1, i32, i32
        }
        scf.condition(%9#0) %9#1, %9#2 : i32, i32
      } do {
      ^bb0(%arg4: i32, %arg5: i32):
        scf.yield %arg4, %arg5 : i32, i32
      }
      scf.yield %8#1 : i32
    }
    %5 = llvm.mlir.addressof @str0 : !llvm.ptr
    %6 = llvm.getelementptr %5[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %7 = llvm.call @printf(%6, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
