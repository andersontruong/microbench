module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  memref.global @randArr : memref<4096xi8> = dense<"
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c8 = arith.constant 8 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c4095_i32 = arith.constant 4095 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i8 = arith.constant 0 : i8
    %c256_i32 = arith.constant 256 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.addi %arg0, %c256_i32 : i32
    %1 = arith.index_cast %0 : i32 to index
    %2 = memref.get_global @randArr : memref<4096xi8>
    %3 = scf.for %arg1 = %c0 to %c8 step %c1 iter_args(%arg2 = %c0_i32) -> (i32) {
      %4 = scf.for %arg3 = %c0 to %1 step %c1 iter_args(%arg4 = %arg2) -> (i32) {
        %5 = memref.load %2[%arg3] : memref<4096xi8>
        %6 = arith.cmpi ne, %5, %c0_i8 : i8
        %7 = scf.if %6 -> (i32) {
          %8 = arith.muli %arg4, %c3_i32 : i32
          %9 = arith.addi %8, %c3_i32 : i32
          %10 = arith.addi %arg4, %9 : i32
          %11 = arith.andi %10, %c4095_i32 : i32
          %12 = arith.muli %11, %c3_i32 : i32
          %13 = arith.addi %12, %c3_i32 : i32
          %14 = arith.addi %11, %13 : i32
          %15 = arith.andi %14, %c4095_i32 : i32
          %16 = arith.muli %15, %c3_i32 : i32
          %17 = arith.addi %16, %c3_i32 : i32
          %18 = arith.addi %15, %17 : i32
          %19 = arith.andi %18, %c4095_i32 : i32
          %20 = arith.muli %19, %c3_i32 : i32
          %21 = arith.addi %20, %c3_i32 : i32
          %22 = arith.addi %19, %21 : i32
          %23 = arith.andi %22, %c4095_i32 : i32
          %24 = arith.muli %23, %c3_i32 : i32
          %25 = arith.addi %24, %c3_i32 : i32
          %26 = arith.addi %23, %25 : i32
          %27 = arith.andi %26, %c4095_i32 : i32
          %28 = arith.muli %27, %c3_i32 : i32
          %29 = arith.addi %28, %c3_i32 : i32
          %30 = arith.addi %27, %29 : i32
          %31 = arith.andi %30, %c4095_i32 : i32
          %32 = arith.muli %31, %c3_i32 : i32
          %33 = arith.addi %32, %c3_i32 : i32
          %34 = arith.addi %31, %33 : i32
          %35 = arith.andi %34, %c4095_i32 : i32
          %36 = arith.muli %35, %c3_i32 : i32
          %37 = arith.addi %36, %c3_i32 : i32
          %38 = arith.addi %35, %37 : i32
          %39 = arith.andi %38, %c4095_i32 : i32
          %40 = arith.muli %39, %c3_i32 : i32
          %41 = arith.addi %40, %c3_i32 : i32
          %42 = arith.addi %39, %41 : i32
          %43 = arith.andi %42, %c4095_i32 : i32
          scf.yield %43 : i32
        } else {
          %8 = arith.andi %arg4, %c4095_i32 : i32
          %9 = arith.muli %8, %c3_i32 : i32
          %10 = arith.addi %9, %c3_i32 : i32
          %11 = arith.addi %8, %10 : i32
          %12 = arith.andi %11, %c4095_i32 : i32
          %13 = arith.muli %12, %c3_i32 : i32
          %14 = arith.addi %13, %c3_i32 : i32
          %15 = arith.addi %12, %14 : i32
          %16 = arith.andi %15, %c4095_i32 : i32
          %17 = arith.muli %16, %c3_i32 : i32
          %18 = arith.addi %17, %c3_i32 : i32
          %19 = arith.addi %16, %18 : i32
          %20 = arith.andi %19, %c4095_i32 : i32
          %21 = arith.muli %20, %c3_i32 : i32
          %22 = arith.addi %21, %c3_i32 : i32
          %23 = arith.addi %20, %22 : i32
          %24 = arith.andi %23, %c4095_i32 : i32
          %25 = arith.muli %24, %c3_i32 : i32
          %26 = arith.addi %25, %c3_i32 : i32
          %27 = arith.addi %24, %26 : i32
          %28 = arith.andi %27, %c4095_i32 : i32
          %29 = arith.muli %28, %c3_i32 : i32
          %30 = arith.addi %29, %c3_i32 : i32
          %31 = arith.addi %28, %30 : i32
          %32 = arith.andi %31, %c4095_i32 : i32
          %33 = arith.muli %32, %c3_i32 : i32
          %34 = arith.addi %33, %c3_i32 : i32
          %35 = arith.addi %32, %34 : i32
          %36 = arith.andi %35, %c4095_i32 : i32
          %37 = arith.muli %36, %c3_i32 : i32
          %38 = arith.addi %37, %c3_i32 : i32
          %39 = arith.addi %36, %38 : i32
          %40 = arith.andi %39, %c4095_i32 : i32
          %41 = arith.muli %40, %c3_i32 : i32
          %42 = arith.addi %41, %c3_i32 : i32
          %43 = arith.addi %40, %42 : i32
          scf.yield %43 : i32
        }
        scf.yield %7 : i32
      }
      scf.yield %4 : i32
    }
    return %3 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.undef : i32
    %1 = llvm.mlir.addressof @str0 : !llvm.ptr
    %2 = llvm.getelementptr %1[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %3 = llvm.call @printf(%2, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
