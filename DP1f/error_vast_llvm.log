/usr/include/bits/stdio.h:41:28: error: unexpected error: failed to materialize conversion for result #0 of operation 'hl.implicit_cast' that remained live after conversion
  return vfprintf (stdout, __fmt, __arg);
                           ^
/usr/include/bits/stdio.h:41:28: error: unexpected note: see current operation: %11 = "hl.implicit_cast"(%1) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<si8,  restrict >>) -> !hl.ptr<si8>
  return vfprintf (stdout, __fmt, __arg);
                           ^
/usr/include/bits/stdio.h:41:10: error: unexpected note: see existing live user here: %14 = hl.call @vfprintf(%9, %11, %13) : (!hl.ptr<!hl.record<@_IO_FILE>>, !hl.ptr<si8>, !hl.ptr<!hl.record<@__va_list_tag>>) -> si32
  return vfprintf (stdout, __fmt, __arg);
         ^
// -----// IR Dump After LowerValueCategories Failed (vast-lower-value-categories) //----- //
"core.module"() <{sym_name = "/home/ando/projects/mlir-df/microbench/DP1f/bench.c"}> ({
  "ll.func"() <{function_type = !core.fn<(si64, si64) -> (si64)>, linkage = #core.global_linkage_kind<external>, sym_name = "__builtin_expect", sym_visibility = "private"}> ({
  }) {hl.builtin = #hl.builtin<528>, hl.const = #hl.const, hl.nothrow = #hl.nothrow} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_marker"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_codecvt"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_wide_data"} : () -> ()
  "hl.struct"() ({
    "hl.field"() {sym_name = "_flags", type = si32} : () -> ()
    "hl.field"() {sym_name = "_IO_read_ptr", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_read_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_read_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_write_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_write_ptr", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_write_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_buf_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_buf_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_save_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_backup_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_save_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_markers", type = !hl.ptr<!hl.record<@_IO_marker>>} : () -> ()
    "hl.field"() {sym_name = "_chain", type = !hl.ptr<!hl.record<@_IO_FILE>>} : () -> ()
    "hl.field"() {sym_name = "_fileno", type = si32} : () -> ()
    "hl.field"() {sym_name = "_flags2", type = si32} : () -> ()
    "hl.field"() {sym_name = "_old_offset", type = si64} : () -> ()
    "hl.field"() {sym_name = "_cur_column", type = ui16} : () -> ()
    "hl.field"() {sym_name = "_vtable_offset", type = si8} : () -> ()
    "hl.field"() {sym_name = "_shortbuf", type = !hl.array<1, si8>} : () -> ()
    "hl.field"() {sym_name = "_lock", type = !hl.ptr<ui8>} : () -> ()
    "hl.field"() {sym_name = "_offset", type = si64} : () -> ()
    "hl.field"() {sym_name = "_codecvt", type = !hl.ptr<!hl.record<@_IO_codecvt>>} : () -> ()
    "hl.field"() {sym_name = "_wide_data", type = !hl.ptr<!hl.record<@_IO_wide_data>>} : () -> ()
    "hl.field"() {sym_name = "_freeres_list", type = !hl.ptr<!hl.record<@_IO_FILE>>} : () -> ()
    "hl.field"() {sym_name = "_freeres_buf", type = !hl.ptr<ui8>} : () -> ()
    "hl.field"() {sym_name = "_prevchain", type = !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>} : () -> ()
    "hl.field"() {sym_name = "_mode", type = si32} : () -> ()
    "hl.field"() {sym_name = "_unused2", type = !hl.array<20, si8>} : () -> ()
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 3 : i64, sym_name = "stdin", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 3 : i64, sym_name = "stdout", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>,  restrict >, !hl.ptr<si8,  restrict >, !hl.ptr<!hl.record<@__va_list_tag>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "vfprintf", sym_visibility = "private"}> ({
  }) {hl.builtin = #hl.builtin<1374>, hl.format = #hl.format<"printf">, hl.nonnull = #hl.nonnull, hl.nothrow = #hl.nothrow} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "getc", sym_visibility = "private"}> ({
  }) {hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "putc", sym_visibility = "private"}> ({
  }) {hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "__uflow", sym_visibility = "private"}> ({
  }) : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "__overflow", sym_visibility = "private"}> ({
  }) : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<si8,  restrict >, !hl.ptr<!hl.record<@__va_list_tag>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "vprintf"}> ({
  ^bb0(%arg13: !hl.ptr<si8,  restrict >, %arg14: !hl.ptr<!hl.record<@__va_list_tag>>):
    %299 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__fmt", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<si8,  restrict >>
    %300 = "ll.cell_init"(%299, %arg13) : (!hl.lvalue<!hl.ptr<si8,  restrict >>, !hl.ptr<si8,  restrict >) -> !hl.lvalue<!hl.ptr<si8,  restrict >>
    %301 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__arg", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>
    %302 = "ll.cell_init"(%301, %arg14) : (!hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>, !hl.ptr<!hl.record<@__va_list_tag>>) -> !hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>
    %303 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
    %304 = "hl.implicit_cast"(%303) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
    %305 = "hl.implicit_cast"(%299) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<si8,  restrict >>) -> !hl.ptr<si8>
    %306 = "hl.implicit_cast"(%301) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>) -> !hl.ptr<!hl.record<@__va_list_tag>>
    %307 = "hl.call"(%304, %305, %306) {callee = @vfprintf} : (!hl.ptr<!hl.record<@_IO_FILE>>, !hl.ptr<si8>, !hl.ptr<!hl.record<@__va_list_tag>>) -> si32
    "ll.return"(%307) : (si32) -> ()
  }) {hl.builtin = #hl.builtin<1359>, hl.format = #hl.format<"printf">, hl.gnu_inline = #hl.gnu_inline, hl.nothrow = #hl.nothrow} : () -> ()
  "ll.func"() <{function_type = !core.fn<() -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "getchar"}> ({
    %296 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
    %297 = "hl.implicit_cast"(%296) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
    %298 = "hl.call"(%297) {callee = @getc} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
    "ll.return"(%298) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "fgetc_unlocked"}> ({
  ^bb0(%arg12: !hl.ptr<!hl.record<@_IO_FILE>>):
    %268 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__fp", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %269 = "ll.cell_init"(%268, %arg12) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %270 = "hl.expr"() ({
      %271 = "hl.cond"() ({
        %282 = "hl.expr"() ({
          %287 = "hl.expr"() ({
            "hl.value.yield"(%268) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %288 = "hl.implicit_cast"(%287) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %289 = "ll.gep"(%288) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %290 = "hl.implicit_cast"(%289) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %291 = "hl.expr"() ({
            "hl.value.yield"(%268) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %292 = "hl.implicit_cast"(%291) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %293 = "ll.gep"(%292) <{field = @_IO_read_end, idx = 2 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %294 = "hl.implicit_cast"(%293) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %295 = "hl.cmp"(%290, %294) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%295) : (si32) -> ()
        }) : () -> si32
        %283 = "hl.implicit_cast"(%282) {kind = 26 : i64} : (si32) -> si64
        %284 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %285 = "hl.implicit_cast"(%284) {kind = 26 : i64} : (si32) -> si64
        %286 = "hl.call"(%283, %285) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%286) : (si64) -> ()
      }, {
        %280 = "hl.implicit_cast"(%268) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %281 = "hl.call"(%280) {callee = @__uflow} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
        "hl.value.yield"(%281) : (si32) -> ()
      }, {
        %272 = "hl.expr"() ({
          "hl.value.yield"(%268) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %273 = "hl.implicit_cast"(%272) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %274 = "ll.gep"(%273) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
        %275 = "hl.post.inc"(%274) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
        %276 = "hl.cstyle_cast"(%275) {kind = 1 : i64} : (!hl.ptr<si8>) -> !hl.ptr<ui8>
        %277 = "hl.deref"(%276) : (!hl.ptr<ui8>) -> !hl.lvalue<ui8>
        %278 = "hl.implicit_cast"(%277) {kind = 4 : i64} : (!hl.lvalue<ui8>) -> ui8
        %279 = "hl.implicit_cast"(%278) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%279) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%271) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%270) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "getc_unlocked"}> ({
  ^bb0(%arg11: !hl.ptr<!hl.record<@_IO_FILE>>):
    %240 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__fp", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %241 = "ll.cell_init"(%240, %arg11) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %242 = "hl.expr"() ({
      %243 = "hl.cond"() ({
        %254 = "hl.expr"() ({
          %259 = "hl.expr"() ({
            "hl.value.yield"(%240) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %260 = "hl.implicit_cast"(%259) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %261 = "ll.gep"(%260) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %262 = "hl.implicit_cast"(%261) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %263 = "hl.expr"() ({
            "hl.value.yield"(%240) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %264 = "hl.implicit_cast"(%263) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %265 = "ll.gep"(%264) <{field = @_IO_read_end, idx = 2 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %266 = "hl.implicit_cast"(%265) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %267 = "hl.cmp"(%262, %266) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%267) : (si32) -> ()
        }) : () -> si32
        %255 = "hl.implicit_cast"(%254) {kind = 26 : i64} : (si32) -> si64
        %256 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %257 = "hl.implicit_cast"(%256) {kind = 26 : i64} : (si32) -> si64
        %258 = "hl.call"(%255, %257) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%258) : (si64) -> ()
      }, {
        %252 = "hl.implicit_cast"(%240) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %253 = "hl.call"(%252) {callee = @__uflow} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
        "hl.value.yield"(%253) : (si32) -> ()
      }, {
        %244 = "hl.expr"() ({
          "hl.value.yield"(%240) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %245 = "hl.implicit_cast"(%244) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %246 = "ll.gep"(%245) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
        %247 = "hl.post.inc"(%246) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
        %248 = "hl.cstyle_cast"(%247) {kind = 1 : i64} : (!hl.ptr<si8>) -> !hl.ptr<ui8>
        %249 = "hl.deref"(%248) : (!hl.ptr<ui8>) -> !hl.lvalue<ui8>
        %250 = "hl.implicit_cast"(%249) {kind = 4 : i64} : (!hl.lvalue<ui8>) -> ui8
        %251 = "hl.implicit_cast"(%250) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%251) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%243) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%242) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<() -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "getchar_unlocked"}> ({
    %210 = "hl.expr"() ({
      %211 = "hl.cond"() ({
        %224 = "hl.expr"() ({
          %229 = "hl.expr"() ({
            %239 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%239) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %230 = "hl.implicit_cast"(%229) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %231 = "ll.gep"(%230) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %232 = "hl.implicit_cast"(%231) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %233 = "hl.expr"() ({
            %238 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%238) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %234 = "hl.implicit_cast"(%233) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %235 = "ll.gep"(%234) <{field = @_IO_read_end, idx = 2 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %236 = "hl.implicit_cast"(%235) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %237 = "hl.cmp"(%232, %236) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%237) : (si32) -> ()
        }) : () -> si32
        %225 = "hl.implicit_cast"(%224) {kind = 26 : i64} : (si32) -> si64
        %226 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %227 = "hl.implicit_cast"(%226) {kind = 26 : i64} : (si32) -> si64
        %228 = "hl.call"(%225, %227) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%228) : (si64) -> ()
      }, {
        %221 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
        %222 = "hl.implicit_cast"(%221) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %223 = "hl.call"(%222) {callee = @__uflow} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
        "hl.value.yield"(%223) : (si32) -> ()
      }, {
        %212 = "hl.expr"() ({
          %220 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
          "hl.value.yield"(%220) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %213 = "hl.implicit_cast"(%212) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %214 = "ll.gep"(%213) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
        %215 = "hl.post.inc"(%214) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
        %216 = "hl.cstyle_cast"(%215) {kind = 1 : i64} : (!hl.ptr<si8>) -> !hl.ptr<ui8>
        %217 = "hl.deref"(%216) : (!hl.ptr<ui8>) -> !hl.lvalue<ui8>
        %218 = "hl.implicit_cast"(%217) {kind = 4 : i64} : (!hl.lvalue<ui8>) -> ui8
        %219 = "hl.implicit_cast"(%218) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%219) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%211) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%210) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "putchar"}> ({
  ^bb0(%arg10: si32):
    %204 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %205 = "ll.cell_init"(%204, %arg10) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %206 = "hl.implicit_cast"(%204) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
    %207 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
    %208 = "hl.implicit_cast"(%207) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
    %209 = "hl.call"(%206, %208) {callee = @putc} : (si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> si32
    "ll.return"(%209) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "fputc_unlocked"}> ({
  ^bb0(%arg8: si32, %arg9: !hl.ptr<!hl.record<@_IO_FILE>>):
    %166 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %167 = "ll.cell_init"(%166, %arg8) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %168 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %169 = "ll.cell_init"(%168, %arg9) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %170 = "hl.expr"() ({
      %171 = "hl.cond"() ({
        %190 = "hl.expr"() ({
          %195 = "hl.expr"() ({
            "hl.value.yield"(%168) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %196 = "hl.implicit_cast"(%195) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %197 = "ll.gep"(%196) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %198 = "hl.implicit_cast"(%197) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %199 = "hl.expr"() ({
            "hl.value.yield"(%168) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %200 = "hl.implicit_cast"(%199) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %201 = "ll.gep"(%200) <{field = @_IO_write_end, idx = 6 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %202 = "hl.implicit_cast"(%201) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %203 = "hl.cmp"(%198, %202) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%203) : (si32) -> ()
        }) : () -> si32
        %191 = "hl.implicit_cast"(%190) {kind = 26 : i64} : (si32) -> si64
        %192 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %193 = "hl.implicit_cast"(%192) {kind = 26 : i64} : (si32) -> si64
        %194 = "hl.call"(%191, %193) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%194) : (si64) -> ()
      }, {
        %184 = "hl.implicit_cast"(%168) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %185 = "hl.expr"() ({
          "hl.value.yield"(%166) : (!hl.lvalue<si32>) -> ()
        }) : () -> !hl.lvalue<si32>
        %186 = "hl.implicit_cast"(%185) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %187 = "hl.cstyle_cast"(%186) {kind = 26 : i64} : (si32) -> ui8
        %188 = "hl.implicit_cast"(%187) {kind = 26 : i64} : (ui8) -> si32
        %189 = "hl.call"(%184, %188) {callee = @__overflow} : (!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> si32
        "hl.value.yield"(%189) : (si32) -> ()
      }, {
        %172 = "hl.expr"() ({
          %175 = "hl.expr"() ({
            "hl.value.yield"(%168) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %176 = "hl.implicit_cast"(%175) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %177 = "ll.gep"(%176) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %178 = "hl.post.inc"(%177) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %179 = "hl.deref"(%178) : (!hl.ptr<si8>) -> !hl.lvalue<si8>
          %180 = "hl.expr"() ({
            "hl.value.yield"(%166) : (!hl.lvalue<si32>) -> ()
          }) : () -> !hl.lvalue<si32>
          %181 = "hl.implicit_cast"(%180) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
          %182 = "hl.implicit_cast"(%181) {kind = 26 : i64} : (si32) -> si8
          %183 = "hl.assign"(%182, %179) : (si8, !hl.lvalue<si8>) -> si8
          "hl.value.yield"(%183) : (si8) -> ()
        }) : () -> si8
        %173 = "hl.cstyle_cast"(%172) {kind = 26 : i64} : (si8) -> ui8
        %174 = "hl.implicit_cast"(%173) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%174) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%171) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%170) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "putc_unlocked"}> ({
  ^bb0(%arg6: si32, %arg7: !hl.ptr<!hl.record<@_IO_FILE>>):
    %128 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %129 = "ll.cell_init"(%128, %arg6) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %130 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %131 = "ll.cell_init"(%130, %arg7) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %132 = "hl.expr"() ({
      %133 = "hl.cond"() ({
        %152 = "hl.expr"() ({
          %157 = "hl.expr"() ({
            "hl.value.yield"(%130) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %158 = "hl.implicit_cast"(%157) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %159 = "ll.gep"(%158) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %160 = "hl.implicit_cast"(%159) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %161 = "hl.expr"() ({
            "hl.value.yield"(%130) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %162 = "hl.implicit_cast"(%161) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %163 = "ll.gep"(%162) <{field = @_IO_write_end, idx = 6 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %164 = "hl.implicit_cast"(%163) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %165 = "hl.cmp"(%160, %164) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%165) : (si32) -> ()
        }) : () -> si32
        %153 = "hl.implicit_cast"(%152) {kind = 26 : i64} : (si32) -> si64
        %154 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %155 = "hl.implicit_cast"(%154) {kind = 26 : i64} : (si32) -> si64
        %156 = "hl.call"(%153, %155) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%156) : (si64) -> ()
      }, {
        %146 = "hl.implicit_cast"(%130) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %147 = "hl.expr"() ({
          "hl.value.yield"(%128) : (!hl.lvalue<si32>) -> ()
        }) : () -> !hl.lvalue<si32>
        %148 = "hl.implicit_cast"(%147) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %149 = "hl.cstyle_cast"(%148) {kind = 26 : i64} : (si32) -> ui8
        %150 = "hl.implicit_cast"(%149) {kind = 26 : i64} : (ui8) -> si32
        %151 = "hl.call"(%146, %150) {callee = @__overflow} : (!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> si32
        "hl.value.yield"(%151) : (si32) -> ()
      }, {
        %134 = "hl.expr"() ({
          %137 = "hl.expr"() ({
            "hl.value.yield"(%130) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %138 = "hl.implicit_cast"(%137) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %139 = "ll.gep"(%138) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %140 = "hl.post.inc"(%139) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %141 = "hl.deref"(%140) : (!hl.ptr<si8>) -> !hl.lvalue<si8>
          %142 = "hl.expr"() ({
            "hl.value.yield"(%128) : (!hl.lvalue<si32>) -> ()
          }) : () -> !hl.lvalue<si32>
          %143 = "hl.implicit_cast"(%142) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
          %144 = "hl.implicit_cast"(%143) {kind = 26 : i64} : (si32) -> si8
          %145 = "hl.assign"(%144, %141) : (si8, !hl.lvalue<si8>) -> si8
          "hl.value.yield"(%145) : (si8) -> ()
        }) : () -> si8
        %135 = "hl.cstyle_cast"(%134) {kind = 26 : i64} : (si8) -> ui8
        %136 = "hl.implicit_cast"(%135) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%136) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%133) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%132) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "putchar_unlocked"}> ({
  ^bb0(%arg5: si32):
    %88 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %89 = "ll.cell_init"(%88, %arg5) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %90 = "hl.expr"() ({
      %91 = "hl.cond"() ({
        %112 = "hl.expr"() ({
          %117 = "hl.expr"() ({
            %127 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%127) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %118 = "hl.implicit_cast"(%117) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %119 = "ll.gep"(%118) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %120 = "hl.implicit_cast"(%119) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %121 = "hl.expr"() ({
            %126 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%126) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %122 = "hl.implicit_cast"(%121) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %123 = "ll.gep"(%122) <{field = @_IO_write_end, idx = 6 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %124 = "hl.implicit_cast"(%123) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %125 = "hl.cmp"(%120, %124) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%125) : (si32) -> ()
        }) : () -> si32
        %113 = "hl.implicit_cast"(%112) {kind = 26 : i64} : (si32) -> si64
        %114 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %115 = "hl.implicit_cast"(%114) {kind = 26 : i64} : (si32) -> si64
        %116 = "hl.call"(%113, %115) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%116) : (si64) -> ()
      }, {
        %105 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
        %106 = "hl.implicit_cast"(%105) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %107 = "hl.expr"() ({
          "hl.value.yield"(%88) : (!hl.lvalue<si32>) -> ()
        }) : () -> !hl.lvalue<si32>
        %108 = "hl.implicit_cast"(%107) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %109 = "hl.cstyle_cast"(%108) {kind = 26 : i64} : (si32) -> ui8
        %110 = "hl.implicit_cast"(%109) {kind = 26 : i64} : (ui8) -> si32
        %111 = "hl.call"(%106, %110) {callee = @__overflow} : (!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> si32
        "hl.value.yield"(%111) : (si32) -> ()
      }, {
        %92 = "hl.expr"() ({
          %95 = "hl.expr"() ({
            %104 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%104) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %96 = "hl.implicit_cast"(%95) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %97 = "ll.gep"(%96) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %98 = "hl.post.inc"(%97) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %99 = "hl.deref"(%98) : (!hl.ptr<si8>) -> !hl.lvalue<si8>
          %100 = "hl.expr"() ({
            "hl.value.yield"(%88) : (!hl.lvalue<si32>) -> ()
          }) : () -> !hl.lvalue<si32>
          %101 = "hl.implicit_cast"(%100) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
          %102 = "hl.implicit_cast"(%101) {kind = 26 : i64} : (si32) -> si8
          %103 = "hl.assign"(%102, %99) : (si8, !hl.lvalue<si8>) -> si8
          "hl.value.yield"(%103) : (si8) -> ()
        }) : () -> si8
        %93 = "hl.cstyle_cast"(%92) {kind = 26 : i64} : (si8) -> ui8
        %94 = "hl.implicit_cast"(%93) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%94) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%91) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%90) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "feof_unlocked"}> ({
  ^bb0(%arg4: !hl.ptr<!hl.record<@_IO_FILE>>):
    %76 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %77 = "ll.cell_init"(%76, %arg4) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %78 = "hl.expr"() ({
      %79 = "hl.expr"() ({
        %82 = "hl.expr"() ({
          "hl.value.yield"(%76) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %83 = "hl.implicit_cast"(%82) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %84 = "ll.gep"(%83) <{field = @_flags, idx = 0 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<si32>
        %85 = "hl.implicit_cast"(%84) {kind = 4 : i64} : (!hl.ptr<si32>) -> si32
        %86 = "hl.const"() {value = #core.integer<16> : si32} : () -> si32
        %87 = "hl.bin.and"(%85, %86) : (si32, si32) -> si32
        "hl.value.yield"(%87) : (si32) -> ()
      }) : () -> si32
      %80 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
      %81 = "hl.cmp"(%79, %80) {predicate = 1 : i64} : (si32, si32) -> si32
      "hl.value.yield"(%81) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%78) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull, hl.nothrow = #hl.nothrow} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "ferror_unlocked"}> ({
  ^bb0(%arg3: !hl.ptr<!hl.record<@_IO_FILE>>):
    %64 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %65 = "ll.cell_init"(%64, %arg3) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %66 = "hl.expr"() ({
      %67 = "hl.expr"() ({
        %70 = "hl.expr"() ({
          "hl.value.yield"(%64) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %71 = "hl.implicit_cast"(%70) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %72 = "ll.gep"(%71) <{field = @_flags, idx = 0 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<si32>
        %73 = "hl.implicit_cast"(%72) {kind = 4 : i64} : (!hl.ptr<si32>) -> si32
        %74 = "hl.const"() {value = #core.integer<32> : si32} : () -> si32
        %75 = "hl.bin.and"(%73, %74) : (si32, si32) -> si32
        "hl.value.yield"(%75) : (si32) -> ()
      }) : () -> si32
      %68 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
      %69 = "hl.cmp"(%67, %68) {predicate = 1 : i64} : (si32, si32) -> si32
      "hl.value.yield"(%69) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%66) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull, hl.nothrow = #hl.nothrow} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 0 : i64, sym_name = "arrA", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.array<8192, f32>>} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 0 : i64, sym_name = "arrB", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.array<8192, f32>>} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32) -> (f32)>, linkage = #core.global_linkage_kind<external>, sym_name = "loop"}> ({
  ^bb0(%arg2: si32):
    %16 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "zero", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %17 = "ll.cell_init"(%16, %arg2) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %18 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "i", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %19 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "iters", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %20 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "t1", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<f32>
    %21 = "hl.implicit_cast"(%16) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
    %22 = "hl.assign"(%21, %19) : (si32, !hl.lvalue<si32>) -> si32
    "core.scope"() ({
      "ll.br"()[^bb2] : () -> ()
    ^bb1:  // pred: ^bb3
      %24 = "hl.const"() {value = #core.integer<1> : si32} : () -> si32
      %25 = "hl.assign.add"(%24, %19) : (si32, !hl.lvalue<si32>) -> si32
      "ll.br"()[^bb2] : () -> ()
    ^bb2:  // 2 preds: ^bb0, ^bb1
      %26 = "hl.implicit_cast"(%19) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %27 = "hl.const"() {value = #core.integer<2> : si32} : () -> si32
      %28 = "hl.cmp"(%26, %27) {predicate = 2 : i64} : (si32, si32) -> si32
      %29 = "hl.implicit_cast"(%28) {kind = 26 : i64} : (si32) -> i1
      "ll.cond_scope_ret"(%29)[^bb3] : (i1) -> ()
    ^bb3:  // pred: ^bb2
      %30 = "hl.implicit_cast"(%16) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %31 = "hl.assign"(%30, %18) : (si32, !hl.lvalue<si32>) -> si32
      "core.scope"() ({
        "ll.br"()[^bb2] : () -> ()
      ^bb1:  // pred: ^bb3
        %40 = "hl.const"() {value = #core.integer<1> : si32} : () -> si32
        %41 = "hl.assign.add"(%40, %18) : (si32, !hl.lvalue<si32>) -> si32
        "ll.br"()[^bb2] : () -> ()
      ^bb2:  // 2 preds: ^bb0, ^bb1
        %42 = "hl.implicit_cast"(%18) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %43 = "hl.const"() {value = #core.integer<8192> : si32} : () -> si32
        %44 = "hl.cmp"(%42, %43) {predicate = 2 : i64} : (si32, si32) -> si32
        %45 = "hl.implicit_cast"(%44) {kind = 26 : i64} : (si32) -> i1
        "ll.cond_scope_ret"(%45)[^bb3] : (i1) -> ()
      ^bb3:  // pred: ^bb2
        %46 = "hl.ref"() {name = @arrA} : () -> !hl.ptr<!hl.array<8192, f32>>
        %47 = "hl.implicit_cast"(%46) {kind = 11 : i64} : (!hl.ptr<!hl.array<8192, f32>>) -> !hl.ptr<f32>
        %48 = "hl.implicit_cast"(%18) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %49 = "hl.subscript"(%47, %48) : (!hl.ptr<f32>, si32) -> !hl.lvalue<f32>
        %50 = "hl.ref"() {name = @arrA} : () -> !hl.ptr<!hl.array<8192, f32>>
        %51 = "hl.implicit_cast"(%50) {kind = 11 : i64} : (!hl.ptr<!hl.array<8192, f32>>) -> !hl.ptr<f32>
        %52 = "hl.implicit_cast"(%18) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %53 = "hl.subscript"(%51, %52) : (!hl.ptr<f32>, si32) -> !hl.lvalue<f32>
        %54 = "hl.implicit_cast"(%53) {kind = 4 : i64} : (!hl.lvalue<f32>) -> f32
        %55 = "hl.const"() {value = #core.float<3.200000e+00> : f32} : () -> f32
        %56 = "hl.fmul"(%54, %55) : (f32, f32) -> f32
        %57 = "hl.ref"() {name = @arrB} : () -> !hl.ptr<!hl.array<8192, f32>>
        %58 = "hl.implicit_cast"(%57) {kind = 11 : i64} : (!hl.ptr<!hl.array<8192, f32>>) -> !hl.ptr<f32>
        %59 = "hl.implicit_cast"(%18) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %60 = "hl.subscript"(%58, %59) : (!hl.ptr<f32>, si32) -> !hl.lvalue<f32>
        %61 = "hl.implicit_cast"(%60) {kind = 4 : i64} : (!hl.lvalue<f32>) -> f32
        %62 = "hl.fadd"(%56, %61) : (f32, f32) -> f32
        %63 = "hl.assign"(%62, %49) : (f32, !hl.lvalue<f32>) -> f32
        "ll.br"()[^bb1] : () -> ()
      }) : () -> ()
      %32 = "hl.ref"() {name = @arrA} : () -> !hl.ptr<!hl.array<8192, f32>>
      %33 = "hl.implicit_cast"(%32) {kind = 11 : i64} : (!hl.ptr<!hl.array<8192, f32>>) -> !hl.ptr<f32>
      %34 = "hl.const"() {value = #core.integer<8192> : si32} : () -> si32
      %35 = "hl.const"() {value = #core.integer<1> : si32} : () -> si32
      %36 = "hl.sub"(%34, %35) : (si32, si32) -> si32
      %37 = "hl.subscript"(%33, %36) : (!hl.ptr<f32>, si32) -> !hl.lvalue<f32>
      %38 = "hl.implicit_cast"(%37) {kind = 4 : i64} : (!hl.lvalue<f32>) -> f32
      %39 = "hl.assign.fadd"(%38, %20) : (f32, !hl.lvalue<f32>) -> f32
      "ll.br"()[^bb1] : () -> ()
    }) : () -> ()
    %23 = "hl.implicit_cast"(%20) {kind = 4 : i64} : (!hl.lvalue<f32>) -> f32
    "ll.return"(%23) : (f32) -> ()
  }) {hl.noinline = #hl.noinline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.ptr<si8>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "main"}> ({
  ^bb0(%arg0: si32, %arg1: !hl.ptr<!hl.ptr<si8>>):
    %0 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "argc", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %1 = "ll.cell_init"(%0, %arg0) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %2 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "argv", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.ptr<si8>>>
    %3 = "ll.cell_init"(%2, %arg1) : (!hl.lvalue<!hl.ptr<!hl.ptr<si8>>>, !hl.ptr<!hl.ptr<si8>>) -> !hl.lvalue<!hl.ptr<!hl.ptr<si8>>>
    "core.scope"() ({
      %5 = "hl.const"() {value = #core.integer<10000> : si32} : () -> si32
      %6 = "hl.assign.bin.and"(%5, %0) : (si32, !hl.lvalue<si32>) -> si32
      "hl.asm"() {asm_template = "xchg %bx,%bx", is_volatile, operandSegmentSizes = array<i32: 0, 0, 0>} : () -> ()
      "hl.null"() : () -> ()
      %7 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "t", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
      %8 = "hl.implicit_cast"(%0) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %9 = "hl.call"(%8) {callee = @loop} : (si32) -> f32
      %10 = "hl.implicit_cast"(%9) {kind = 35 : i64} : (f32) -> si32
      %11 = "ll.cell_init"(%7, %10) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
      "hl.asm"() {asm_template = "xchg %cx,%cx", is_volatile, operandSegmentSizes = array<i32: 0, 0, 0>} : () -> ()
      "hl.null"() : () -> ()
      %12 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "a", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<f32>
      %13 = "hl.implicit_cast"(%7) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %14 = "hl.implicit_cast"(%13) {kind = 28 : i64} : (si32) -> f32
      %15 = "ll.cell_init"(%12, %14) : (!hl.lvalue<f32>, f32) -> !hl.lvalue<f32>
    }) : () -> ()
    %4 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
    "ll.return"(%4) : (si32) -> ()
  }) : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!hl.ptr<ui8,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<si64>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<2, si32>, {vast.abi_align.key = 32 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.record<@_IO_FILE>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 1728 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_FILE>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_marker>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<ui8>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<f32>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<1, si8>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 8 : i32}>, #dlti.dl_entry<!hl.ptr<si8,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<si8>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.ptr<si8>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<1, !hl.record<@__va_list_tag>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 192 : i32}>, #dlti.dl_entry<!hl.record<@__va_list_tag>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 192 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_FILE>,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@__va_list_tag>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.record<@"anonymous[1637]">, {vast.abi_align.key = 32 : i32, vast.dl.bw = 32 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.ptr<si8>,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_wide_data>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_codecvt>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<20, si8>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 160 : i32}>, #dlti.dl_entry<!hl.array<8192, f32>, {vast.abi_align.key = 32 : i32, vast.dl.bw = 262144 : i32}>, #dlti.dl_entry<!hl.array<4, si8>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 32 : i32}>>, vast.core.lang = #core<lang c>, vast.core.target_triple = "x86_64-pc-linux-gnu"} : () -> ()

[VAST fatal] MLIR pass manager failed when running vast passes
PLEASE submit a bug report to https://github.com/trailofbits/vast/issues and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front -O2 -DMAGIC -I../ bench.c -vast-emit-mlir=llvm -o bench.llvm
1.	<eof> parser at end of file
 #0 0x00007e340de1a730 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/Unix/Signals.inc:723:22
 #1 0x00007e340de17bf5 llvm::sys::RunSignalHandlers() /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/Signals.cpp:105:20
 #2 0x00007e340de17bf5 llvm::sys::CleanupOnSignal(unsigned long) /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/Unix/Signals.inc:367:31
 #3 0x00007e340dd01319 HandleCrash /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/CrashRecoveryContext.cpp:73:5
 #4 0x00007e340dd01319 CrashRecoverySignalHandler /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/CrashRecoveryContext.cpp:390:62
 #5 0x00007e340d04c1d0 (/usr/lib/libc.so.6+0x3d1d0)
 #6 0x00005e1bf876cda4 vast::cc::vast_stream_consumer::process_mlir_module(vast::cc::target_dialect, mlir::ModuleOp) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xbe5da4)
 #7 0x00005e1bf876c4ca vast::cc::vast_stream_consumer::emit_mlir_output(vast::cc::target_dialect, mlir::OwningOpRef<mlir::ModuleOp>) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xbe54ca)
 #8 0x00005e1bf876c15a vast::cc::vast_stream_consumer::HandleTranslationUnit(clang::ASTContext&) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xbe515a)
 #9 0x00007e34163d9c86 __gnu_cxx::__normal_iterator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>*, std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>>::__normal_iterator(std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>* const&) /usr/include/c++/14.2.1/bits/stl_iterator.h:1068:0
#10 0x00007e34163d9c86 std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>::begin() /usr/include/c++/14.2.1/bits/stl_vector.h:874:0
#11 0x00007e34163d9c86 void clang::finalize<std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>>(std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>&, clang::Sema const&) /usr/src/debug/clang/clang-19.1.6.src/include/clang/Sema/TemplateInstCallback.h:54:0
#12 0x00007e34163d9c86 clang::ParseAST(clang::Sema&, bool, bool) /usr/src/debug/clang/clang-19.1.6.src/lib/Parse/ParseAST.cpp:191:0
#13 0x00007e34180f97e1 clang::FrontendAction::Execute() /usr/src/debug/clang/clang-19.1.6.src/lib/Frontend/FrontendAction.cpp:1078:21
#14 0x00007e341808f64f llvm::Error::getPtr() const /usr/include/llvm/Support/Error.h:282:12
#15 0x00007e341808f64f llvm::Error::operator bool() /usr/include/llvm/Support/Error.h:242:22
#16 0x00007e341808f64f clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) /usr/src/debug/clang/clang-19.1.6.src/lib/Frontend/CompilerInstance.cpp:1061:42
#17 0x00005e1bf859891f vast::cc::execute_compiler_invocation(clang::CompilerInstance*, vast::cc::vast_args const&) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa1191f)
#18 0x00005e1bf859d0a7 vast::cc::cc1(vast::cc::vast_args const&, llvm::ArrayRef<char const*>, char const*, void*) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa160a7)
#19 0x00005e1bf8599bfe execute_cc1_tool(llvm::SmallVectorImpl<char const*>&) driver.cpp:0:0
#20 0x00007e3417d642b5 operator() /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Job.cpp:440:32
#21 0x00007e3417d642b5 callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef> >, std::string*, bool*) const::<lambda()> > /usr/include/llvm/ADT/STLFunctionalExtras.h:45:52
#22 0x00007e340dd0176a llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/CrashRecoveryContext.cpp:428:1
#23 0x00007e3417d6b276 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Job.cpp:444:10
#24 0x00007e3417d21e09 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Compilation.cpp:200:3
#25 0x00007e3417d221fc clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Compilation.cpp:253:5
#26 0x00007e3417d92164 llvm::SmallVectorBase<unsigned int>::empty() const /usr/include/llvm/ADT/SmallVector.h:95:46
#27 0x00007e3417d92164 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Driver.cpp:1946:28
#28 0x00005e1bf859a137 vast::cc::driver::execute() driver.cpp:0:0
#29 0x00005e1bf8599592 main (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa12592)
#30 0x00007e340d034e08 __libc_start_call_main /usr/src/debug/glibc/glibc/csu/../sysdeps/nptl/libc_start_call_main.h:74:3
#31 0x00007e340d034ecc call_init /usr/src/debug/glibc/glibc/csu/../csu/libc-start.c:128:20
#32 0x00007e340d034ecc __libc_start_main /usr/src/debug/glibc/glibc/csu/../csu/libc-start.c:347:5
#33 0x00005e1bf85983e5 _start (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa113e5)
vast-front: error: clang frontend command failed with exit code 132 (use -v to see invocation)
clang version 19.1.6
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /home/ando/projects/mlir-df/vast/builds/default/tools/vast-front/Release
vast-front: error: unable to execute command: Illegal instruction (core dumped)
vast-front: note: diagnostic msg: Error generating preprocessed source(s).
