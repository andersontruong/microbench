module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  func.func @loop(%arg0: i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c4096 = arith.constant 4096 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %cst = arith.constant 1.600000e-01 : f32
    %cst_0 = arith.constant 1.500000e-01 : f32
    %cst_1 = arith.constant 1.400000e-01 : f32
    %cst_2 = arith.constant 1.300000e-01 : f32
    %cst_3 = arith.constant 1.200000e-01 : f32
    %cst_4 = arith.constant 1.200000e+00 : f32
    %cst_5 = arith.constant 4.000000e-01 : f32
    %cst_6 = arith.constant 2.000000e-01 : f32
    %cst_7 = arith.constant 3.000000e+00 : f32
    %cst_8 = arith.constant 2.500000e+00 : f32
    %cst_9 = arith.constant 7.000000e+00 : f32
    %cst_10 = arith.constant 2.000000e+00 : f32
    %cst_11 = arith.constant 2.100000e+01 : f32
    %cst_12 = arith.constant 3.200000e+00 : f32
    %cst_13 = arith.constant 8.900000e+01 : f32
    %cst_14 = arith.constant 1.100000e+00 : f32
    %0:8 = scf.for %arg1 = %c0 to %c4096 step %c1 iter_args(%arg2 = %cst_7, %arg3 = %cst_8, %arg4 = %cst_9, %arg5 = %cst_10, %arg6 = %cst_11, %arg7 = %cst_12, %arg8 = %cst_13, %arg9 = %cst_14) -> (f32, f32, f32, f32, f32, f32, f32, f32) {
      %8 = arith.mulf %arg9, %cst_6 : f32
      %9 = arith.mulf %arg8, %cst_5 : f32
      %10 = arith.mulf %arg7, %cst_4 : f32
      %11 = arith.mulf %arg6, %cst_3 : f32
      %12 = arith.mulf %arg5, %cst_2 : f32
      %13 = arith.mulf %arg4, %cst_1 : f32
      %14 = arith.mulf %arg3, %cst_0 : f32
      %15 = arith.mulf %arg2, %cst : f32
      scf.yield %15, %14, %13, %12, %11, %10, %9, %8 : f32, f32, f32, f32, f32, f32, f32, f32
    }
    %1 = arith.addf %0#7, %0#6 : f32
    %2 = arith.addf %1, %0#5 : f32
    %3 = arith.addf %2, %0#4 : f32
    %4 = arith.addf %3, %0#3 : f32
    %5 = arith.addf %4, %0#2 : f32
    %6 = arith.addf %5, %0#1 : f32
    %7 = arith.addf %6, %0#0 : f32
    return %7 : f32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.undef : i32
    %1 = llvm.mlir.addressof @str0 : !llvm.ptr
    %2 = llvm.getelementptr %1[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %3 = llvm.call @printf(%2, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
