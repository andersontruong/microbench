module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  memref.global @arr1 : memref<2097152xi32> = uninitialized
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %c46080_i32 = arith.constant 46080 : i32
    %c65536_i32 = arith.constant 65536 : i32
    %c31_i32 = arith.constant 31 : i32
    %c4096_i32 = arith.constant 4096 : i32
    %c323_i32 = arith.constant 323 : i32
    %c44257_i32 = arith.constant 44257 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = memref.get_global @arr1 : memref<2097152xi32>
    %1:7 = scf.while (%arg1 = %c323_i32, %arg2 = %c44257_i32, %arg3 = %c2_i32, %arg4 = %c1_i32, %arg5 = %c1_i32) : (i32, i32, i32, i32, i32) -> (i32, i32, i32, i32, i32, i32, i32) {
      %2 = arith.shrui %arg2, %c1_i32 : i32
      %3 = arith.andi %arg2, %c1_i32 : i32
      %4 = arith.subi %c0_i32, %3 : i32
      %5 = arith.andi %4, %c46080_i32 : i32
      %6 = arith.xori %2, %5 : i32
      %7 = arith.andi %6, %c31_i32 : i32
      %8 = arith.muli %7, %c65536_i32 : i32
      %9 = arith.index_cast %8 : i32 to index
      %10 = memref.load %0[%9] : memref<2097152xi32>
      %11 = arith.addi %arg5, %10 : i32
      %12 = arith.shrui %arg1, %c1_i32 : i32
      %13 = arith.andi %arg1, %c1_i32 : i32
      %14 = arith.subi %c0_i32, %13 : i32
      %15 = arith.andi %14, %c46080_i32 : i32
      %16 = arith.xori %12, %15 : i32
      %17 = arith.addi %arg3, %c1_i32 : i32
      %18 = arith.andi %16, %c31_i32 : i32
      %19 = arith.muli %18, %c65536_i32 : i32
      %20 = arith.index_cast %19 : i32 to index
      memref.store %17, %0[%20] : memref<2097152xi32>
      %21 = arith.cmpi slt, %arg4, %c4096_i32 : i32
      scf.condition(%21) %11, %arg3, %arg5, %10, %arg1, %arg2, %arg4 : i32, i32, i32, i32, i32, i32, i32
    } do {
    ^bb0(%arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32):
      %2 = arith.andi %arg6, %c1_i32 : i32
      %3 = arith.andi %arg5, %c1_i32 : i32
      %4 = arith.subi %c0_i32, %2 : i32
      %5 = arith.subi %c0_i32, %3 : i32
      %6 = arith.andi %4, %c46080_i32 : i32
      %7 = arith.shrui %arg6, %c1_i32 : i32
      %8 = arith.andi %5, %c46080_i32 : i32
      %9 = arith.shrui %arg5, %c1_i32 : i32
      %10 = arith.addi %arg3, %arg4 : i32
      %11 = arith.addi %arg2, %c1_i32 : i32
      %12 = arith.xori %7, %6 : i32
      %13 = arith.xori %9, %8 : i32
      %14 = arith.addi %arg7, %c1_i32 : i32
      scf.yield %13, %12, %11, %14, %10 : i32, i32, i32, i32, i32
    }
    return %1#0 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %c2_i32 = arith.constant 2 : i32
    %c44257_i32 = arith.constant 44257 : i32
    %c323_i32 = arith.constant 323 : i32
    %c4096_i32 = arith.constant 4096 : i32
    %c31_i32 = arith.constant 31 : i32
    %c65536_i32 = arith.constant 65536 : i32
    %c46080_i32 = arith.constant 46080 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.mlir.undef : i32
    %1 = memref.get_global @arr1 : memref<2097152xi32>
    %2:6 = scf.while (%arg2 = %c323_i32, %arg3 = %c44257_i32, %arg4 = %c2_i32, %arg5 = %c1_i32, %arg6 = %c1_i32) : (i32, i32, i32, i32, i32) -> (i32, i32, i32, i32, i32, i32) {
      %6 = arith.shrui %arg3, %c1_i32 : i32
      %7 = arith.andi %arg3, %c1_i32 : i32
      %8 = arith.subi %c0_i32, %7 : i32
      %9 = arith.andi %8, %c46080_i32 : i32
      %10 = arith.xori %6, %9 : i32
      %11 = arith.andi %10, %c31_i32 : i32
      %12 = arith.muli %11, %c65536_i32 : i32
      %13 = arith.index_cast %12 : i32 to index
      %14 = memref.load %1[%13] : memref<2097152xi32>
      %15 = arith.shrui %arg2, %c1_i32 : i32
      %16 = arith.andi %arg2, %c1_i32 : i32
      %17 = arith.subi %c0_i32, %16 : i32
      %18 = arith.andi %17, %c46080_i32 : i32
      %19 = arith.xori %15, %18 : i32
      %20 = arith.addi %arg4, %c1_i32 : i32
      %21 = arith.andi %19, %c31_i32 : i32
      %22 = arith.muli %21, %c65536_i32 : i32
      %23 = arith.index_cast %22 : i32 to index
      memref.store %20, %1[%23] : memref<2097152xi32>
      %24 = arith.cmpi slt, %arg5, %c4096_i32 : i32
      scf.condition(%24) %arg4, %arg6, %14, %arg2, %arg3, %arg5 : i32, i32, i32, i32, i32, i32
    } do {
    ^bb0(%arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32):
      %6 = arith.andi %arg6, %c1_i32 : i32
      %7 = arith.andi %arg5, %c1_i32 : i32
      %8 = arith.subi %c0_i32, %6 : i32
      %9 = arith.subi %c0_i32, %7 : i32
      %10 = arith.andi %8, %c46080_i32 : i32
      %11 = arith.shrui %arg6, %c1_i32 : i32
      %12 = arith.andi %9, %c46080_i32 : i32
      %13 = arith.shrui %arg5, %c1_i32 : i32
      %14 = arith.addi %arg3, %arg4 : i32
      %15 = arith.addi %arg2, %c1_i32 : i32
      %16 = arith.xori %11, %10 : i32
      %17 = arith.xori %13, %12 : i32
      %18 = arith.addi %arg7, %c1_i32 : i32
      scf.yield %17, %16, %15, %18, %14 : i32, i32, i32, i32, i32
    }
    %3 = llvm.mlir.addressof @str0 : !llvm.ptr
    %4 = llvm.getelementptr %3[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %5 = llvm.call @printf(%4, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
