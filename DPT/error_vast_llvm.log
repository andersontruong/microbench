/usr/include/bits/stdio.h:41:28: error: unexpected error: failed to materialize conversion for result #0 of operation 'hl.implicit_cast' that remained live after conversion
  return vfprintf (stdout, __fmt, __arg);
                           ^
/usr/include/bits/stdio.h:41:28: error: unexpected note: see current operation: %11 = "hl.implicit_cast"(%1) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<si8,  restrict >>) -> !hl.ptr<si8>
  return vfprintf (stdout, __fmt, __arg);
                           ^
/usr/include/bits/stdio.h:41:10: error: unexpected note: see existing live user here: %14 = hl.call @vfprintf(%9, %11, %13) : (!hl.ptr<!hl.record<@_IO_FILE>>, !hl.ptr<si8>, !hl.ptr<!hl.record<@__va_list_tag>>) -> si32
  return vfprintf (stdout, __fmt, __arg);
         ^
// -----// IR Dump After LowerValueCategories Failed (vast-lower-value-categories) //----- //
"core.module"() <{sym_name = "/home/ando/projects/mlir-df/microbench/DPT/bench.c"}> ({
  "ll.func"() <{function_type = !core.fn<(si64, si64) -> (si64)>, linkage = #core.global_linkage_kind<external>, sym_name = "__builtin_expect", sym_visibility = "private"}> ({
  }) {hl.builtin = #hl.builtin<528>, hl.const = #hl.const, hl.nothrow = #hl.nothrow} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_marker"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_codecvt"} : () -> ()
  "hl.struct"() ({
  ^bb0:
  }) {sym_name = "_IO_wide_data"} : () -> ()
  "hl.struct"() ({
    "hl.field"() {sym_name = "_flags", type = si32} : () -> ()
    "hl.field"() {sym_name = "_IO_read_ptr", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_read_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_read_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_write_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_write_ptr", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_write_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_buf_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_buf_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_save_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_backup_base", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_IO_save_end", type = !hl.ptr<si8>} : () -> ()
    "hl.field"() {sym_name = "_markers", type = !hl.ptr<!hl.record<@_IO_marker>>} : () -> ()
    "hl.field"() {sym_name = "_chain", type = !hl.ptr<!hl.record<@_IO_FILE>>} : () -> ()
    "hl.field"() {sym_name = "_fileno", type = si32} : () -> ()
    "hl.field"() {sym_name = "_flags2", type = si32} : () -> ()
    "hl.field"() {sym_name = "_old_offset", type = si64} : () -> ()
    "hl.field"() {sym_name = "_cur_column", type = ui16} : () -> ()
    "hl.field"() {sym_name = "_vtable_offset", type = si8} : () -> ()
    "hl.field"() {sym_name = "_shortbuf", type = !hl.array<1, si8>} : () -> ()
    "hl.field"() {sym_name = "_lock", type = !hl.ptr<ui8>} : () -> ()
    "hl.field"() {sym_name = "_offset", type = si64} : () -> ()
    "hl.field"() {sym_name = "_codecvt", type = !hl.ptr<!hl.record<@_IO_codecvt>>} : () -> ()
    "hl.field"() {sym_name = "_wide_data", type = !hl.ptr<!hl.record<@_IO_wide_data>>} : () -> ()
    "hl.field"() {sym_name = "_freeres_list", type = !hl.ptr<!hl.record<@_IO_FILE>>} : () -> ()
    "hl.field"() {sym_name = "_freeres_buf", type = !hl.ptr<ui8>} : () -> ()
    "hl.field"() {sym_name = "_prevchain", type = !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>} : () -> ()
    "hl.field"() {sym_name = "_mode", type = si32} : () -> ()
    "hl.field"() {sym_name = "_unused2", type = !hl.array<20, si8>} : () -> ()
  }) {sym_name = "_IO_FILE"} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 3 : i64, sym_name = "stdin", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 3 : i64, sym_name = "stdout", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>,  restrict >, !hl.ptr<si8,  restrict >, !hl.ptr<!hl.record<@__va_list_tag>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "vfprintf", sym_visibility = "private"}> ({
  }) {hl.builtin = #hl.builtin<1374>, hl.format = #hl.format<"printf">, hl.nonnull = #hl.nonnull, hl.nothrow = #hl.nothrow} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "getc", sym_visibility = "private"}> ({
  }) {hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "putc", sym_visibility = "private"}> ({
  }) {hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "__uflow", sym_visibility = "private"}> ({
  }) : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "__overflow", sym_visibility = "private"}> ({
  }) : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<si8,  restrict >, !hl.ptr<!hl.record<@__va_list_tag>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "vprintf"}> ({
  ^bb0(%arg13: !hl.ptr<si8,  restrict >, %arg14: !hl.ptr<!hl.record<@__va_list_tag>>):
    %294 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__fmt", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<si8,  restrict >>
    %295 = "ll.cell_init"(%294, %arg13) : (!hl.lvalue<!hl.ptr<si8,  restrict >>, !hl.ptr<si8,  restrict >) -> !hl.lvalue<!hl.ptr<si8,  restrict >>
    %296 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__arg", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>
    %297 = "ll.cell_init"(%296, %arg14) : (!hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>, !hl.ptr<!hl.record<@__va_list_tag>>) -> !hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>
    %298 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
    %299 = "hl.implicit_cast"(%298) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
    %300 = "hl.implicit_cast"(%294) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<si8,  restrict >>) -> !hl.ptr<si8>
    %301 = "hl.implicit_cast"(%296) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@__va_list_tag>>>) -> !hl.ptr<!hl.record<@__va_list_tag>>
    %302 = "hl.call"(%299, %300, %301) {callee = @vfprintf} : (!hl.ptr<!hl.record<@_IO_FILE>>, !hl.ptr<si8>, !hl.ptr<!hl.record<@__va_list_tag>>) -> si32
    "ll.return"(%302) : (si32) -> ()
  }) {hl.builtin = #hl.builtin<1359>, hl.format = #hl.format<"printf">, hl.gnu_inline = #hl.gnu_inline, hl.nothrow = #hl.nothrow} : () -> ()
  "ll.func"() <{function_type = !core.fn<() -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "getchar"}> ({
    %291 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
    %292 = "hl.implicit_cast"(%291) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
    %293 = "hl.call"(%292) {callee = @getc} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
    "ll.return"(%293) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "fgetc_unlocked"}> ({
  ^bb0(%arg12: !hl.ptr<!hl.record<@_IO_FILE>>):
    %263 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__fp", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %264 = "ll.cell_init"(%263, %arg12) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %265 = "hl.expr"() ({
      %266 = "hl.cond"() ({
        %277 = "hl.expr"() ({
          %282 = "hl.expr"() ({
            "hl.value.yield"(%263) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %283 = "hl.implicit_cast"(%282) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %284 = "ll.gep"(%283) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %285 = "hl.implicit_cast"(%284) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %286 = "hl.expr"() ({
            "hl.value.yield"(%263) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %287 = "hl.implicit_cast"(%286) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %288 = "ll.gep"(%287) <{field = @_IO_read_end, idx = 2 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %289 = "hl.implicit_cast"(%288) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %290 = "hl.cmp"(%285, %289) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%290) : (si32) -> ()
        }) : () -> si32
        %278 = "hl.implicit_cast"(%277) {kind = 26 : i64} : (si32) -> si64
        %279 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %280 = "hl.implicit_cast"(%279) {kind = 26 : i64} : (si32) -> si64
        %281 = "hl.call"(%278, %280) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%281) : (si64) -> ()
      }, {
        %275 = "hl.implicit_cast"(%263) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %276 = "hl.call"(%275) {callee = @__uflow} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
        "hl.value.yield"(%276) : (si32) -> ()
      }, {
        %267 = "hl.expr"() ({
          "hl.value.yield"(%263) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %268 = "hl.implicit_cast"(%267) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %269 = "ll.gep"(%268) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
        %270 = "hl.post.inc"(%269) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
        %271 = "hl.cstyle_cast"(%270) {kind = 1 : i64} : (!hl.ptr<si8>) -> !hl.ptr<ui8>
        %272 = "hl.deref"(%271) : (!hl.ptr<ui8>) -> !hl.lvalue<ui8>
        %273 = "hl.implicit_cast"(%272) {kind = 4 : i64} : (!hl.lvalue<ui8>) -> ui8
        %274 = "hl.implicit_cast"(%273) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%274) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%266) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%265) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "getc_unlocked"}> ({
  ^bb0(%arg11: !hl.ptr<!hl.record<@_IO_FILE>>):
    %235 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__fp", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %236 = "ll.cell_init"(%235, %arg11) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %237 = "hl.expr"() ({
      %238 = "hl.cond"() ({
        %249 = "hl.expr"() ({
          %254 = "hl.expr"() ({
            "hl.value.yield"(%235) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %255 = "hl.implicit_cast"(%254) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %256 = "ll.gep"(%255) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %257 = "hl.implicit_cast"(%256) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %258 = "hl.expr"() ({
            "hl.value.yield"(%235) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %259 = "hl.implicit_cast"(%258) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %260 = "ll.gep"(%259) <{field = @_IO_read_end, idx = 2 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %261 = "hl.implicit_cast"(%260) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %262 = "hl.cmp"(%257, %261) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%262) : (si32) -> ()
        }) : () -> si32
        %250 = "hl.implicit_cast"(%249) {kind = 26 : i64} : (si32) -> si64
        %251 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %252 = "hl.implicit_cast"(%251) {kind = 26 : i64} : (si32) -> si64
        %253 = "hl.call"(%250, %252) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%253) : (si64) -> ()
      }, {
        %247 = "hl.implicit_cast"(%235) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %248 = "hl.call"(%247) {callee = @__uflow} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
        "hl.value.yield"(%248) : (si32) -> ()
      }, {
        %239 = "hl.expr"() ({
          "hl.value.yield"(%235) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %240 = "hl.implicit_cast"(%239) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %241 = "ll.gep"(%240) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
        %242 = "hl.post.inc"(%241) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
        %243 = "hl.cstyle_cast"(%242) {kind = 1 : i64} : (!hl.ptr<si8>) -> !hl.ptr<ui8>
        %244 = "hl.deref"(%243) : (!hl.ptr<ui8>) -> !hl.lvalue<ui8>
        %245 = "hl.implicit_cast"(%244) {kind = 4 : i64} : (!hl.lvalue<ui8>) -> ui8
        %246 = "hl.implicit_cast"(%245) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%246) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%238) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%237) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<() -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "getchar_unlocked"}> ({
    %205 = "hl.expr"() ({
      %206 = "hl.cond"() ({
        %219 = "hl.expr"() ({
          %224 = "hl.expr"() ({
            %234 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%234) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %225 = "hl.implicit_cast"(%224) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %226 = "ll.gep"(%225) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %227 = "hl.implicit_cast"(%226) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %228 = "hl.expr"() ({
            %233 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%233) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %229 = "hl.implicit_cast"(%228) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %230 = "ll.gep"(%229) <{field = @_IO_read_end, idx = 2 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %231 = "hl.implicit_cast"(%230) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %232 = "hl.cmp"(%227, %231) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%232) : (si32) -> ()
        }) : () -> si32
        %220 = "hl.implicit_cast"(%219) {kind = 26 : i64} : (si32) -> si64
        %221 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %222 = "hl.implicit_cast"(%221) {kind = 26 : i64} : (si32) -> si64
        %223 = "hl.call"(%220, %222) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%223) : (si64) -> ()
      }, {
        %216 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
        %217 = "hl.implicit_cast"(%216) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %218 = "hl.call"(%217) {callee = @__uflow} : (!hl.ptr<!hl.record<@_IO_FILE>>) -> si32
        "hl.value.yield"(%218) : (si32) -> ()
      }, {
        %207 = "hl.expr"() ({
          %215 = "hl.ref"() {name = @stdin} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
          "hl.value.yield"(%215) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %208 = "hl.implicit_cast"(%207) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %209 = "ll.gep"(%208) <{field = @_IO_read_ptr, idx = 1 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
        %210 = "hl.post.inc"(%209) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
        %211 = "hl.cstyle_cast"(%210) {kind = 1 : i64} : (!hl.ptr<si8>) -> !hl.ptr<ui8>
        %212 = "hl.deref"(%211) : (!hl.ptr<ui8>) -> !hl.lvalue<ui8>
        %213 = "hl.implicit_cast"(%212) {kind = 4 : i64} : (!hl.lvalue<ui8>) -> ui8
        %214 = "hl.implicit_cast"(%213) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%214) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%206) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%205) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "putchar"}> ({
  ^bb0(%arg10: si32):
    %199 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %200 = "ll.cell_init"(%199, %arg10) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %201 = "hl.implicit_cast"(%199) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
    %202 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
    %203 = "hl.implicit_cast"(%202) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
    %204 = "hl.call"(%201, %203) {callee = @putc} : (si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> si32
    "ll.return"(%204) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "fputc_unlocked"}> ({
  ^bb0(%arg8: si32, %arg9: !hl.ptr<!hl.record<@_IO_FILE>>):
    %161 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %162 = "ll.cell_init"(%161, %arg8) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %163 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %164 = "ll.cell_init"(%163, %arg9) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %165 = "hl.expr"() ({
      %166 = "hl.cond"() ({
        %185 = "hl.expr"() ({
          %190 = "hl.expr"() ({
            "hl.value.yield"(%163) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %191 = "hl.implicit_cast"(%190) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %192 = "ll.gep"(%191) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %193 = "hl.implicit_cast"(%192) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %194 = "hl.expr"() ({
            "hl.value.yield"(%163) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %195 = "hl.implicit_cast"(%194) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %196 = "ll.gep"(%195) <{field = @_IO_write_end, idx = 6 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %197 = "hl.implicit_cast"(%196) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %198 = "hl.cmp"(%193, %197) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%198) : (si32) -> ()
        }) : () -> si32
        %186 = "hl.implicit_cast"(%185) {kind = 26 : i64} : (si32) -> si64
        %187 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %188 = "hl.implicit_cast"(%187) {kind = 26 : i64} : (si32) -> si64
        %189 = "hl.call"(%186, %188) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%189) : (si64) -> ()
      }, {
        %179 = "hl.implicit_cast"(%163) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %180 = "hl.expr"() ({
          "hl.value.yield"(%161) : (!hl.lvalue<si32>) -> ()
        }) : () -> !hl.lvalue<si32>
        %181 = "hl.implicit_cast"(%180) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %182 = "hl.cstyle_cast"(%181) {kind = 26 : i64} : (si32) -> ui8
        %183 = "hl.implicit_cast"(%182) {kind = 26 : i64} : (ui8) -> si32
        %184 = "hl.call"(%179, %183) {callee = @__overflow} : (!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> si32
        "hl.value.yield"(%184) : (si32) -> ()
      }, {
        %167 = "hl.expr"() ({
          %170 = "hl.expr"() ({
            "hl.value.yield"(%163) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %171 = "hl.implicit_cast"(%170) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %172 = "ll.gep"(%171) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %173 = "hl.post.inc"(%172) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %174 = "hl.deref"(%173) : (!hl.ptr<si8>) -> !hl.lvalue<si8>
          %175 = "hl.expr"() ({
            "hl.value.yield"(%161) : (!hl.lvalue<si32>) -> ()
          }) : () -> !hl.lvalue<si32>
          %176 = "hl.implicit_cast"(%175) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
          %177 = "hl.implicit_cast"(%176) {kind = 26 : i64} : (si32) -> si8
          %178 = "hl.assign"(%177, %174) : (si8, !hl.lvalue<si8>) -> si8
          "hl.value.yield"(%178) : (si8) -> ()
        }) : () -> si8
        %168 = "hl.cstyle_cast"(%167) {kind = 26 : i64} : (si8) -> ui8
        %169 = "hl.implicit_cast"(%168) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%169) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%166) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%165) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "putc_unlocked"}> ({
  ^bb0(%arg6: si32, %arg7: !hl.ptr<!hl.record<@_IO_FILE>>):
    %123 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %124 = "ll.cell_init"(%123, %arg6) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %125 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %126 = "ll.cell_init"(%125, %arg7) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %127 = "hl.expr"() ({
      %128 = "hl.cond"() ({
        %147 = "hl.expr"() ({
          %152 = "hl.expr"() ({
            "hl.value.yield"(%125) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %153 = "hl.implicit_cast"(%152) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %154 = "ll.gep"(%153) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %155 = "hl.implicit_cast"(%154) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %156 = "hl.expr"() ({
            "hl.value.yield"(%125) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %157 = "hl.implicit_cast"(%156) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %158 = "ll.gep"(%157) <{field = @_IO_write_end, idx = 6 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %159 = "hl.implicit_cast"(%158) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %160 = "hl.cmp"(%155, %159) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%160) : (si32) -> ()
        }) : () -> si32
        %148 = "hl.implicit_cast"(%147) {kind = 26 : i64} : (si32) -> si64
        %149 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %150 = "hl.implicit_cast"(%149) {kind = 26 : i64} : (si32) -> si64
        %151 = "hl.call"(%148, %150) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%151) : (si64) -> ()
      }, {
        %141 = "hl.implicit_cast"(%125) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %142 = "hl.expr"() ({
          "hl.value.yield"(%123) : (!hl.lvalue<si32>) -> ()
        }) : () -> !hl.lvalue<si32>
        %143 = "hl.implicit_cast"(%142) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %144 = "hl.cstyle_cast"(%143) {kind = 26 : i64} : (si32) -> ui8
        %145 = "hl.implicit_cast"(%144) {kind = 26 : i64} : (ui8) -> si32
        %146 = "hl.call"(%141, %145) {callee = @__overflow} : (!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> si32
        "hl.value.yield"(%146) : (si32) -> ()
      }, {
        %129 = "hl.expr"() ({
          %132 = "hl.expr"() ({
            "hl.value.yield"(%125) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %133 = "hl.implicit_cast"(%132) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %134 = "ll.gep"(%133) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %135 = "hl.post.inc"(%134) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %136 = "hl.deref"(%135) : (!hl.ptr<si8>) -> !hl.lvalue<si8>
          %137 = "hl.expr"() ({
            "hl.value.yield"(%123) : (!hl.lvalue<si32>) -> ()
          }) : () -> !hl.lvalue<si32>
          %138 = "hl.implicit_cast"(%137) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
          %139 = "hl.implicit_cast"(%138) {kind = 26 : i64} : (si32) -> si8
          %140 = "hl.assign"(%139, %136) : (si8, !hl.lvalue<si8>) -> si8
          "hl.value.yield"(%140) : (si8) -> ()
        }) : () -> si8
        %130 = "hl.cstyle_cast"(%129) {kind = 26 : i64} : (si8) -> ui8
        %131 = "hl.implicit_cast"(%130) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%131) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%128) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%127) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "putchar_unlocked"}> ({
  ^bb0(%arg5: si32):
    %83 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__c", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %84 = "ll.cell_init"(%83, %arg5) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %85 = "hl.expr"() ({
      %86 = "hl.cond"() ({
        %107 = "hl.expr"() ({
          %112 = "hl.expr"() ({
            %122 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%122) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %113 = "hl.implicit_cast"(%112) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %114 = "ll.gep"(%113) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %115 = "hl.implicit_cast"(%114) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %116 = "hl.expr"() ({
            %121 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%121) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %117 = "hl.implicit_cast"(%116) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %118 = "ll.gep"(%117) <{field = @_IO_write_end, idx = 6 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %119 = "hl.implicit_cast"(%118) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %120 = "hl.cmp"(%115, %119) {predicate = 9 : i64} : (!hl.ptr<si8>, !hl.ptr<si8>) -> si32
          "hl.value.yield"(%120) : (si32) -> ()
        }) : () -> si32
        %108 = "hl.implicit_cast"(%107) {kind = 26 : i64} : (si32) -> si64
        %109 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
        %110 = "hl.implicit_cast"(%109) {kind = 26 : i64} : (si32) -> si64
        %111 = "hl.call"(%108, %110) {callee = @__builtin_expect} : (si64, si64) -> si64
        "hl.cond.yield"(%111) : (si64) -> ()
      }, {
        %100 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
        %101 = "hl.implicit_cast"(%100) {kind = 4 : i64} : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %102 = "hl.expr"() ({
          "hl.value.yield"(%83) : (!hl.lvalue<si32>) -> ()
        }) : () -> !hl.lvalue<si32>
        %103 = "hl.implicit_cast"(%102) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %104 = "hl.cstyle_cast"(%103) {kind = 26 : i64} : (si32) -> ui8
        %105 = "hl.implicit_cast"(%104) {kind = 26 : i64} : (ui8) -> si32
        %106 = "hl.call"(%101, %105) {callee = @__overflow} : (!hl.ptr<!hl.record<@_IO_FILE>>, si32) -> si32
        "hl.value.yield"(%106) : (si32) -> ()
      }, {
        %87 = "hl.expr"() ({
          %90 = "hl.expr"() ({
            %99 = "hl.ref"() {name = @stdout} : () -> !hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>
            "hl.value.yield"(%99) : (!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
          }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
          %91 = "hl.implicit_cast"(%90) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
          %92 = "ll.gep"(%91) <{field = @_IO_write_ptr, idx = 5 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<!hl.ptr<si8>>
          %93 = "hl.post.inc"(%92) : (!hl.ptr<!hl.ptr<si8>>) -> !hl.ptr<si8>
          %94 = "hl.deref"(%93) : (!hl.ptr<si8>) -> !hl.lvalue<si8>
          %95 = "hl.expr"() ({
            "hl.value.yield"(%83) : (!hl.lvalue<si32>) -> ()
          }) : () -> !hl.lvalue<si32>
          %96 = "hl.implicit_cast"(%95) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
          %97 = "hl.implicit_cast"(%96) {kind = 26 : i64} : (si32) -> si8
          %98 = "hl.assign"(%97, %94) : (si8, !hl.lvalue<si8>) -> si8
          "hl.value.yield"(%98) : (si8) -> ()
        }) : () -> si8
        %88 = "hl.cstyle_cast"(%87) {kind = 26 : i64} : (si8) -> ui8
        %89 = "hl.implicit_cast"(%88) {kind = 26 : i64} : (ui8) -> si32
        "hl.value.yield"(%89) : (si32) -> ()
      }) : () -> si32
      "hl.value.yield"(%86) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%85) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "feof_unlocked"}> ({
  ^bb0(%arg4: !hl.ptr<!hl.record<@_IO_FILE>>):
    %71 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %72 = "ll.cell_init"(%71, %arg4) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %73 = "hl.expr"() ({
      %74 = "hl.expr"() ({
        %77 = "hl.expr"() ({
          "hl.value.yield"(%71) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %78 = "hl.implicit_cast"(%77) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %79 = "ll.gep"(%78) <{field = @_flags, idx = 0 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<si32>
        %80 = "hl.implicit_cast"(%79) {kind = 4 : i64} : (!hl.ptr<si32>) -> si32
        %81 = "hl.const"() {value = #core.integer<16> : si32} : () -> si32
        %82 = "hl.bin.and"(%80, %81) : (si32, si32) -> si32
        "hl.value.yield"(%82) : (si32) -> ()
      }) : () -> si32
      %75 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
      %76 = "hl.cmp"(%74, %75) {predicate = 1 : i64} : (si32, si32) -> si32
      "hl.value.yield"(%76) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%73) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull, hl.nothrow = #hl.nothrow} : () -> ()
  "ll.func"() <{function_type = !core.fn<(!hl.ptr<!hl.record<@_IO_FILE>>) -> (si32)>, linkage = #core.global_linkage_kind<available_externally>, sym_name = "ferror_unlocked"}> ({
  ^bb0(%arg3: !hl.ptr<!hl.record<@_IO_FILE>>):
    %59 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "__stream", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %60 = "ll.cell_init"(%59, %arg3) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>, !hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
    %61 = "hl.expr"() ({
      %62 = "hl.expr"() ({
        %65 = "hl.expr"() ({
          "hl.value.yield"(%59) : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> ()
        }) : () -> !hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>
        %66 = "hl.implicit_cast"(%65) {kind = 4 : i64} : (!hl.lvalue<!hl.ptr<!hl.record<@_IO_FILE>>>) -> !hl.ptr<!hl.record<@_IO_FILE>>
        %67 = "ll.gep"(%66) <{field = @_flags, idx = 0 : i32}> : (!hl.ptr<!hl.record<@_IO_FILE>>) -> !hl.ptr<si32>
        %68 = "hl.implicit_cast"(%67) {kind = 4 : i64} : (!hl.ptr<si32>) -> si32
        %69 = "hl.const"() {value = #core.integer<32> : si32} : () -> si32
        %70 = "hl.bin.and"(%68, %69) : (si32, si32) -> si32
        "hl.value.yield"(%70) : (si32) -> ()
      }) : () -> si32
      %63 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
      %64 = "hl.cmp"(%62, %63) {predicate = 1 : i64} : (si32, si32) -> si32
      "hl.value.yield"(%64) : (si32) -> ()
    }) : () -> si32
    "ll.return"(%61) : (si32) -> ()
  }) {hl.gnu_inline = #hl.gnu_inline, hl.nonnull = #hl.nonnull, hl.nothrow = #hl.nothrow} : () -> ()
  "ll.func"() <{function_type = !core.fn<(f64) -> (f64)>, linkage = #core.global_linkage_kind<external>, sym_name = "sin", sym_visibility = "private"}> ({
  }) {hl.builtin = #hl.builtin<1095>, hl.nothrow = #hl.nothrow} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 0 : i64, sym_name = "arrA", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.array<1024, f32>>} : () -> ()
  "hl.var"() ({
  }, {
  }) {linkage = #core.global_linkage_kind<external>, storageClass = 0 : i64, sym_name = "arrB", threadStorageClass = 0 : i64, type = !hl.lvalue<!hl.array<1024, f32>>} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32) -> (f32)>, linkage = #core.global_linkage_kind<external>, sym_name = "loop"}> ({
  ^bb0(%arg2: si32):
    %16 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "zero", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %17 = "ll.cell_init"(%16, %arg2) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %18 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "i", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %19 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "iters", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %20 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "t1", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<f32>
    %21 = "hl.implicit_cast"(%16) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
    %22 = "hl.assign"(%21, %19) : (si32, !hl.lvalue<si32>) -> si32
    "core.scope"() ({
      "ll.br"()[^bb2] : () -> ()
    ^bb1:  // pred: ^bb3
      %24 = "hl.const"() {value = #core.integer<1> : si32} : () -> si32
      %25 = "hl.assign.add"(%24, %19) : (si32, !hl.lvalue<si32>) -> si32
      "ll.br"()[^bb2] : () -> ()
    ^bb2:  // 2 preds: ^bb0, ^bb1
      %26 = "hl.implicit_cast"(%19) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %27 = "hl.const"() {value = #core.integer<4> : si32} : () -> si32
      %28 = "hl.cmp"(%26, %27) {predicate = 2 : i64} : (si32, si32) -> si32
      %29 = "hl.implicit_cast"(%28) {kind = 26 : i64} : (si32) -> i1
      "ll.cond_scope_ret"(%29)[^bb3] : (i1) -> ()
    ^bb3:  // pred: ^bb2
      %30 = "hl.implicit_cast"(%16) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %31 = "hl.assign"(%30, %18) : (si32, !hl.lvalue<si32>) -> si32
      "core.scope"() ({
        "ll.br"()[^bb2] : () -> ()
      ^bb1:  // pred: ^bb3
        %40 = "hl.const"() {value = #core.integer<1> : si32} : () -> si32
        %41 = "hl.assign.add"(%40, %18) : (si32, !hl.lvalue<si32>) -> si32
        "ll.br"()[^bb2] : () -> ()
      ^bb2:  // 2 preds: ^bb0, ^bb1
        %42 = "hl.implicit_cast"(%18) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %43 = "hl.const"() {value = #core.integer<1024> : si32} : () -> si32
        %44 = "hl.cmp"(%42, %43) {predicate = 2 : i64} : (si32, si32) -> si32
        %45 = "hl.implicit_cast"(%44) {kind = 26 : i64} : (si32) -> i1
        "ll.cond_scope_ret"(%45)[^bb3] : (i1) -> ()
      ^bb3:  // pred: ^bb2
        %46 = "hl.ref"() {name = @arrA} : () -> !hl.ptr<!hl.array<1024, f32>>
        %47 = "hl.implicit_cast"(%46) {kind = 11 : i64} : (!hl.ptr<!hl.array<1024, f32>>) -> !hl.ptr<f32>
        %48 = "hl.implicit_cast"(%18) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %49 = "hl.subscript"(%47, %48) : (!hl.ptr<f32>, si32) -> !hl.lvalue<f32>
        %50 = "hl.ref"() {name = @arrA} : () -> !hl.ptr<!hl.array<1024, f32>>
        %51 = "hl.implicit_cast"(%50) {kind = 11 : i64} : (!hl.ptr<!hl.array<1024, f32>>) -> !hl.ptr<f32>
        %52 = "hl.implicit_cast"(%18) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
        %53 = "hl.subscript"(%51, %52) : (!hl.ptr<f32>, si32) -> !hl.lvalue<f32>
        %54 = "hl.implicit_cast"(%53) {kind = 4 : i64} : (!hl.lvalue<f32>) -> f32
        %55 = "hl.implicit_cast"(%54) {kind = 38 : i64} : (f32) -> f64
        %56 = "hl.call"(%55) {callee = @sin} : (f64) -> f64
        %57 = "hl.implicit_cast"(%56) {kind = 38 : i64} : (f64) -> f32
        %58 = "hl.assign"(%57, %49) : (f32, !hl.lvalue<f32>) -> f32
        "ll.br"()[^bb1] : () -> ()
      }) : () -> ()
      %32 = "hl.ref"() {name = @arrA} : () -> !hl.ptr<!hl.array<1024, f32>>
      %33 = "hl.implicit_cast"(%32) {kind = 11 : i64} : (!hl.ptr<!hl.array<1024, f32>>) -> !hl.ptr<f32>
      %34 = "hl.const"() {value = #core.integer<1024> : si32} : () -> si32
      %35 = "hl.const"() {value = #core.integer<1> : si32} : () -> si32
      %36 = "hl.sub"(%34, %35) : (si32, si32) -> si32
      %37 = "hl.subscript"(%33, %36) : (!hl.ptr<f32>, si32) -> !hl.lvalue<f32>
      %38 = "hl.implicit_cast"(%37) {kind = 4 : i64} : (!hl.lvalue<f32>) -> f32
      %39 = "hl.assign.fadd"(%38, %20) : (f32, !hl.lvalue<f32>) -> f32
      "ll.br"()[^bb1] : () -> ()
    }) : () -> ()
    %23 = "hl.implicit_cast"(%20) {kind = 4 : i64} : (!hl.lvalue<f32>) -> f32
    "ll.return"(%23) : (f32) -> ()
  }) {hl.noinline = #hl.noinline} : () -> ()
  "ll.func"() <{function_type = !core.fn<(si32, !hl.ptr<!hl.ptr<si8>>) -> (si32)>, linkage = #core.global_linkage_kind<external>, sym_name = "main"}> ({
  ^bb0(%arg0: si32, %arg1: !hl.ptr<!hl.ptr<si8>>):
    %0 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "argc", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
    %1 = "ll.cell_init"(%0, %arg0) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
    %2 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "argv", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<!hl.ptr<!hl.ptr<si8>>>
    %3 = "ll.cell_init"(%2, %arg1) : (!hl.lvalue<!hl.ptr<!hl.ptr<si8>>>, !hl.ptr<!hl.ptr<si8>>) -> !hl.lvalue<!hl.ptr<!hl.ptr<si8>>>
    "core.scope"() ({
      %5 = "hl.const"() {value = #core.integer<10000> : si32} : () -> si32
      %6 = "hl.assign.bin.and"(%5, %0) : (si32, !hl.lvalue<si32>) -> si32
      "hl.asm"() {asm_template = "xchg %bx,%bx", is_volatile, operandSegmentSizes = array<i32: 0, 0, 0>} : () -> ()
      "hl.null"() : () -> ()
      %7 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "t", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<si32>
      %8 = "hl.implicit_cast"(%0) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %9 = "hl.call"(%8) {callee = @loop} : (si32) -> f32
      %10 = "hl.implicit_cast"(%9) {kind = 35 : i64} : (f32) -> si32
      %11 = "ll.cell_init"(%7, %10) : (!hl.lvalue<si32>, si32) -> !hl.lvalue<si32>
      "hl.asm"() {asm_template = "xchg %cx,%cx", is_volatile, operandSegmentSizes = array<i32: 0, 0, 0>} : () -> ()
      "hl.null"() : () -> ()
      %12 = "ll.cell"() <{storageClass = 0 : i64, sym_name = "a", threadStorageClass = 0 : i64}> : () -> !hl.lvalue<f32>
      %13 = "hl.implicit_cast"(%7) {kind = 4 : i64} : (!hl.lvalue<si32>) -> si32
      %14 = "hl.implicit_cast"(%13) {kind = 28 : i64} : (si32) -> f32
      %15 = "ll.cell_init"(%12, %14) : (!hl.lvalue<f32>, f32) -> !hl.lvalue<f32>
    }) : () -> ()
    %4 = "hl.const"() {value = #core.integer<0> : si32} : () -> si32
    "ll.return"(%4) : (si32) -> ()
  }) : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!hl.array<1, !hl.record<@__va_list_tag>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 192 : i32}>, #dlti.dl_entry<!hl.ptr<f128>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<20, si8>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 160 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.ptr<si8>,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.record<@"anonymous[1637]">, {vast.abi_align.key = 32 : i32, vast.dl.bw = 32 : i32}>, #dlti.dl_entry<!hl.array<2, si32>, {vast.abi_align.key = 32 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<1024, f32>, {vast.abi_align.key = 32 : i32, vast.dl.bw = 32768 : i32}>, #dlti.dl_entry<!hl.ptr<si8>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<4, si8>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 32 : i32}>, #dlti.dl_entry<!hl.ptr<si64>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.ptr<si8>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<si8,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<f32>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<1, si8>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 8 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_marker>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<ui8>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<ui8,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_FILE>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_codecvt>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@__va_list_tag>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.record<@_IO_FILE>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 1728 : i32}>, #dlti.dl_entry<!hl.ptr<f64>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_wide_data>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.ptr<!hl.record<@_IO_FILE>>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<si32>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.record<@__va_list_tag>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 192 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.record<@_IO_FILE>,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>>, vast.core.lang = #core<lang c>, vast.core.target_triple = "x86_64-pc-linux-gnu"} : () -> ()

[VAST fatal] MLIR pass manager failed when running vast passes
PLEASE submit a bug report to https://github.com/trailofbits/vast/issues and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front -O3 -DMAGIC -I../ bench.c -vast-emit-mlir=llvm -o bench.llvm
1.	<eof> parser at end of file
 #0 0x00007c223441a730 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/Unix/Signals.inc:723:22
 #1 0x00007c2234417bf5 llvm::sys::RunSignalHandlers() /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/Signals.cpp:105:20
 #2 0x00007c2234417bf5 llvm::sys::CleanupOnSignal(unsigned long) /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/Unix/Signals.inc:367:31
 #3 0x00007c2234301319 HandleCrash /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/CrashRecoveryContext.cpp:73:5
 #4 0x00007c2234301319 CrashRecoverySignalHandler /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/CrashRecoveryContext.cpp:390:62
 #5 0x00007c223364c1d0 (/usr/lib/libc.so.6+0x3d1d0)
 #6 0x000057159091bda4 vast::cc::vast_stream_consumer::process_mlir_module(vast::cc::target_dialect, mlir::ModuleOp) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xbe5da4)
 #7 0x000057159091b4ca vast::cc::vast_stream_consumer::emit_mlir_output(vast::cc::target_dialect, mlir::OwningOpRef<mlir::ModuleOp>) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xbe54ca)
 #8 0x000057159091b15a vast::cc::vast_stream_consumer::HandleTranslationUnit(clang::ASTContext&) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xbe515a)
 #9 0x00007c223c9d9c86 __gnu_cxx::__normal_iterator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>*, std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>>::__normal_iterator(std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>* const&) /usr/include/c++/14.2.1/bits/stl_iterator.h:1068:0
#10 0x00007c223c9d9c86 std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>::begin() /usr/include/c++/14.2.1/bits/stl_vector.h:874:0
#11 0x00007c223c9d9c86 void clang::finalize<std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>>(std::vector<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>, std::allocator<std::unique_ptr<clang::TemplateInstantiationCallback, std::default_delete<clang::TemplateInstantiationCallback>>>>&, clang::Sema const&) /usr/src/debug/clang/clang-19.1.6.src/include/clang/Sema/TemplateInstCallback.h:54:0
#12 0x00007c223c9d9c86 clang::ParseAST(clang::Sema&, bool, bool) /usr/src/debug/clang/clang-19.1.6.src/lib/Parse/ParseAST.cpp:191:0
#13 0x00007c223e6f97e1 clang::FrontendAction::Execute() /usr/src/debug/clang/clang-19.1.6.src/lib/Frontend/FrontendAction.cpp:1078:21
#14 0x00007c223e68f64f llvm::Error::getPtr() const /usr/include/llvm/Support/Error.h:282:12
#15 0x00007c223e68f64f llvm::Error::operator bool() /usr/include/llvm/Support/Error.h:242:22
#16 0x00007c223e68f64f clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) /usr/src/debug/clang/clang-19.1.6.src/lib/Frontend/CompilerInstance.cpp:1061:42
#17 0x000057159074791f vast::cc::execute_compiler_invocation(clang::CompilerInstance*, vast::cc::vast_args const&) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa1191f)
#18 0x000057159074c0a7 vast::cc::cc1(vast::cc::vast_args const&, llvm::ArrayRef<char const*>, char const*, void*) (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa160a7)
#19 0x0000571590748bfe execute_cc1_tool(llvm::SmallVectorImpl<char const*>&) driver.cpp:0:0
#20 0x00007c223e3642b5 operator() /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Job.cpp:440:32
#21 0x00007c223e3642b5 callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef> >, std::string*, bool*) const::<lambda()> > /usr/include/llvm/ADT/STLFunctionalExtras.h:45:52
#22 0x00007c223430176a llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) /usr/src/debug/llvm/llvm-19.1.6.src/lib/Support/CrashRecoveryContext.cpp:428:1
#23 0x00007c223e36b276 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Job.cpp:444:10
#24 0x00007c223e321e09 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Compilation.cpp:200:3
#25 0x00007c223e3221fc clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Compilation.cpp:253:5
#26 0x00007c223e392164 llvm::SmallVectorBase<unsigned int>::empty() const /usr/include/llvm/ADT/SmallVector.h:95:46
#27 0x00007c223e392164 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) /usr/src/debug/clang/clang-19.1.6.src/lib/Driver/Driver.cpp:1946:28
#28 0x0000571590749137 vast::cc::driver::execute() driver.cpp:0:0
#29 0x0000571590748592 main (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa12592)
#30 0x00007c2233634e08 __libc_start_call_main /usr/src/debug/glibc/glibc/csu/../sysdeps/nptl/libc_start_call_main.h:74:3
#31 0x00007c2233634ecc call_init /usr/src/debug/glibc/glibc/csu/../csu/libc-start.c:128:20
#32 0x00007c2233634ecc __libc_start_main /usr/src/debug/glibc/glibc/csu/../csu/libc-start.c:347:5
#33 0x00005715907473e5 _start (/home/ando/projects/mlir-df/vast//builds/default/tools/vast-front/Release/vast-front+0xa113e5)
vast-front: error: clang frontend command failed with exit code 132 (use -v to see invocation)
clang version 19.1.6
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /home/ando/projects/mlir-df/vast/builds/default/tools/vast-front/Release
vast-front: error: unable to execute command: Illegal instruction (core dumped)
vast-front: note: diagnostic msg: Error generating preprocessed source(s).
