module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  memref.global @randArr : memref<4096xi8> = dense<"
  func.func @loopy_helper(%arg0: i32, %arg1: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.muli %arg0, %c2_i32 : i32
    %1 = arith.addi %0, %arg1 : i32
    %2 = arith.muli %1, %c3_i32 : i32
    %3 = arith.addi %arg0, %arg1 : i32
    %4 = arith.muli %3, %3 : i32
    %5 = arith.addi %2, %4 : i32
    return %5 : i32
  }
  func.func @func_loopy(%arg0: i32, %arg1: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c-16_i32 = arith.constant -16 : i32
    %c1 = arith.constant 1 : index
    %c65793_i32 = arith.constant 65793 : i32
    %c4_i32 = arith.constant 4 : i32
    %c16_i32 = arith.constant 16 : i32
    %0 = llvm.mlir.undef : i32
    %1 = arith.cmpi slt, %arg0, %c16_i32 : i32
    %2 = arith.cmpi sge, %arg0, %c16_i32 : i32
    %3 = scf.if %2 -> (i32) {
      %4 = arith.addi %arg0, %c-16_i32 : i32
      %5 = arith.addi %arg0, %arg1 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.index_cast %4 : i32 to index
      %8 = memref.get_global @randArr : memref<4096xi8>
      %9 = scf.for %arg2 = %7 to %6 step %c1 iter_args(%arg3 = %arg0) -> (i32) {
        %10 = arith.index_cast %arg2 : index to i32
        %11 = arith.addi %arg3, %10 : i32
        %12 = memref.load %8[%arg2] : memref<4096xi8>
        %13 = arith.extsi %12 : i8 to i32
        %14 = arith.addi %11, %13 : i32
        %15 = arith.andi %14, %c65793_i32 : i32
        %16 = arith.addi %arg3, %15 : i32
        %17 = arith.muli %16, %c2_i32 : i32
        %18 = arith.addi %17, %arg1 : i32
        %19 = arith.muli %18, %c3_i32 : i32
        %20 = arith.addi %16, %arg1 : i32
        %21 = arith.muli %20, %20 : i32
        %22 = arith.addi %19, %21 : i32
        %23 = arith.trunci %22 : i32 to i8
        memref.store %23, %8[%arg2] : memref<4096xi8>
        scf.yield %16 : i32
      }
      scf.yield %9 : i32
    } else {
      %4 = scf.if %1 -> (i32) {
        %5 = arith.addi %arg0, %c4_i32 : i32
        %6 = arith.muli %5, %c2_i32 : i32
        %7 = arith.addi %6, %arg1 : i32
        %8 = arith.muli %7, %c3_i32 : i32
        %9 = arith.addi %5, %arg1 : i32
        %10 = arith.muli %9, %9 : i32
        %11 = arith.addi %8, %10 : i32
        scf.yield %11 : i32
      } else {
        scf.yield %0 : i32
      }
      scf.yield %4 : i32
    }
    return %3 : i32
  }
  func.func @func_no_loopy(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c16_i32 = arith.constant 16 : i32
    %c10_i32 = arith.constant 10 : i32
    %0 = arith.addi %arg0, %c10_i32 : i32
    %1 = memref.get_global @randArr : memref<4096xi8>
    %2 = arith.index_cast %arg0 : i32 to index
    %3 = affine.load %1[symbol(%2)] : memref<4096xi8>
    %4 = arith.extsi %3 : i8 to i32
    %5 = arith.addi %0, %4 : i32
    %6 = arith.remsi %5, %c16_i32 : i32
    return %6 : i32
  }
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %c16_i32 = arith.constant 16 : i32
    %c4_i32 = arith.constant 4 : i32
    %c65793_i32 = arith.constant 65793 : i32
    %c-16_i32 = arith.constant -16 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c48 = arith.constant 48 : index
    %c1 = arith.constant 1 : index
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.index_cast %arg0 : i32 to index
    %1 = llvm.mlir.undef : i32
    %2 = memref.get_global @randArr : memref<4096xi8>
    %3 = scf.for %arg1 = %0 to %c48 step %c1 iter_args(%arg2 = %c0_i32) -> (i32) {
      %8 = arith.index_cast %arg1 : index to i32
      %9 = arith.cmpi slt, %8, %c16_i32 : i32
      %10 = arith.cmpi sge, %8, %c16_i32 : i32
      %11 = scf.if %10 -> (i32) {
        %13 = arith.addi %8, %c-16_i32 : i32
        %14 = arith.addi %8, %arg0 : i32
        %15 = arith.index_cast %14 : i32 to index
        %16 = arith.index_cast %13 : i32 to index
        %17 = scf.for %arg3 = %16 to %15 step %c1 iter_args(%arg4 = %8) -> (i32) {
          %18 = arith.index_cast %arg3 : index to i32
          %19 = arith.addi %arg4, %18 : i32
          %20 = memref.load %2[%arg3] : memref<4096xi8>
          %21 = arith.extsi %20 : i8 to i32
          %22 = arith.addi %19, %21 : i32
          %23 = arith.andi %22, %c65793_i32 : i32
          %24 = arith.addi %arg4, %23 : i32
          %25 = arith.muli %24, %c2_i32 : i32
          %26 = arith.addi %25, %arg0 : i32
          %27 = arith.muli %26, %c3_i32 : i32
          %28 = arith.addi %24, %arg0 : i32
          %29 = arith.muli %28, %28 : i32
          %30 = arith.addi %27, %29 : i32
          %31 = arith.trunci %30 : i32 to i8
          memref.store %31, %2[%arg3] : memref<4096xi8>
          scf.yield %24 : i32
        }
        scf.yield %17 : i32
      } else {
        %13 = scf.if %9 -> (i32) {
          %14 = arith.addi %8, %c4_i32 : i32
          %15 = arith.muli %14, %c2_i32 : i32
          %16 = arith.addi %15, %arg0 : i32
          %17 = arith.muli %16, %c3_i32 : i32
          %18 = arith.addi %14, %arg0 : i32
          %19 = arith.muli %18, %18 : i32
          %20 = arith.addi %17, %19 : i32
          scf.yield %20 : i32
        } else {
          scf.yield %1 : i32
        }
        scf.yield %13 : i32
      }
      %12 = arith.addi %arg2, %11 : i32
      scf.yield %12 : i32
    }
    %4 = llvm.mlir.addressof @str0 : !llvm.ptr
    %5 = llvm.getelementptr %4[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %6 = llvm.call @printf(%5, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    %7 = scf.for %arg1 = %0 to %c48 step %c1 iter_args(%arg2 = %3) -> (i32) {
      %8 = arith.index_cast %arg1 : index to i32
      %9 = func.call @func_no_loopy(%8) : (i32) -> i32
      %10 = arith.addi %arg2, %9 : i32
      scf.yield %10 : i32
    }
    return %7 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %c0_i32 = arith.constant 0 : i32
    %c1 = arith.constant 1 : index
    %c48 = arith.constant 48 : index
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c-16_i32 = arith.constant -16 : i32
    %c65793_i32 = arith.constant 65793 : i32
    %c4_i32 = arith.constant 4 : i32
    %c16_i32 = arith.constant 16 : i32
    %c10000_i32 = arith.constant 10000 : i32
    %0 = llvm.mlir.undef : i32
    %1 = arith.andi %arg0, %c10000_i32 : i32
    %2 = arith.index_cast %1 : i32 to index
    %3 = memref.get_global @randArr : memref<4096xi8>
    %4 = scf.for %arg2 = %2 to %c48 step %c1 iter_args(%arg3 = %c0_i32) -> (i32) {
      %9 = arith.index_cast %arg2 : index to i32
      %10 = arith.cmpi slt, %9, %c16_i32 : i32
      %11 = arith.cmpi sge, %9, %c16_i32 : i32
      %12 = scf.if %11 -> (i32) {
        %14 = arith.addi %9, %c-16_i32 : i32
        %15 = arith.addi %9, %1 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.index_cast %14 : i32 to index
        %18 = scf.for %arg4 = %17 to %16 step %c1 iter_args(%arg5 = %9) -> (i32) {
          %19 = arith.index_cast %arg4 : index to i32
          %20 = arith.addi %arg5, %19 : i32
          %21 = memref.load %3[%arg4] : memref<4096xi8>
          %22 = arith.extsi %21 : i8 to i32
          %23 = arith.addi %20, %22 : i32
          %24 = arith.andi %23, %c65793_i32 : i32
          %25 = arith.addi %arg5, %24 : i32
          %26 = arith.muli %25, %c2_i32 : i32
          %27 = arith.addi %26, %1 : i32
          %28 = arith.muli %27, %c3_i32 : i32
          %29 = arith.addi %25, %1 : i32
          %30 = arith.muli %29, %29 : i32
          %31 = arith.addi %28, %30 : i32
          %32 = arith.trunci %31 : i32 to i8
          memref.store %32, %3[%arg4] : memref<4096xi8>
          scf.yield %25 : i32
        }
        scf.yield %18 : i32
      } else {
        %14 = scf.if %10 -> (i32) {
          %15 = arith.addi %9, %c4_i32 : i32
          %16 = arith.muli %15, %c2_i32 : i32
          %17 = arith.addi %16, %1 : i32
          %18 = arith.muli %17, %c3_i32 : i32
          %19 = arith.addi %15, %1 : i32
          %20 = arith.muli %19, %19 : i32
          %21 = arith.addi %18, %20 : i32
          scf.yield %21 : i32
        } else {
          scf.yield %0 : i32
        }
        scf.yield %14 : i32
      }
      %13 = arith.addi %arg3, %12 : i32
      scf.yield %13 : i32
    }
    %5 = llvm.mlir.addressof @str0 : !llvm.ptr
    %6 = llvm.getelementptr %5[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %7 = llvm.call @printf(%6, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    %8 = scf.for %arg2 = %2 to %c48 step %c1 iter_args(%arg3 = %4) -> (i32) {
      %9 = arith.index_cast %arg2 : index to i32
      %10 = func.call @func_no_loopy(%9) : (i32) -> i32
      %11 = arith.addi %arg3, %10 : i32
      scf.yield %11 : i32
    }
    return %0 : i32
  }
}
