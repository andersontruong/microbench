module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  memref.global @arr : memref<65536x4xi32> = uninitialized
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %c46080_i32 = arith.constant 46080 : i32
    %c44257_i32 = arith.constant 44257 : i32
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @arr : memref<65536x4xi32>
    %1:2 = scf.while (%arg1 = %c44257_i32) : (i32) -> (i32, i32) {
      %2 = arith.shrui %arg1, %c1_i32 : i32
      %3 = arith.andi %arg1, %c1_i32 : i32
      %4 = arith.subi %c0_i32, %3 : i32
      %5 = arith.andi %4, %c46080_i32 : i32
      %6 = arith.xori %2, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      memref.store %6, %0[%7, %c3] : memref<65536x4xi32>
      %8 = memref.load %0[%7, %c0] : memref<65536x4xi32>
      %9 = arith.addi %6, %8 : i32
      %10 = arith.cmpi ne, %9, %c44257_i32 : i32
      scf.condition(%10) %8, %arg1 : i32, i32
    } do {
    ^bb0(%arg1: i32, %arg2: i32):
      %2 = arith.andi %arg2, %c1_i32 : i32
      %3 = arith.subi %c0_i32, %2 : i32
      %4 = arith.andi %3, %c46080_i32 : i32
      %5 = arith.shrui %arg2, %c1_i32 : i32
      %6 = arith.xori %5, %4 : i32
      %7 = arith.addi %6, %arg1 : i32
      scf.yield %7 : i32
    }
    return %c0_i32 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c44257_i32 = arith.constant 44257 : i32
    %c46080_i32 = arith.constant 46080 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.mlir.undef : i32
    %1 = memref.get_global @arr : memref<65536x4xi32>
    %2:2 = scf.while (%arg2 = %c44257_i32) : (i32) -> (i32, i32) {
      %6 = arith.shrui %arg2, %c1_i32 : i32
      %7 = arith.andi %arg2, %c1_i32 : i32
      %8 = arith.subi %c0_i32, %7 : i32
      %9 = arith.andi %8, %c46080_i32 : i32
      %10 = arith.xori %6, %9 : i32
      %11 = arith.index_cast %10 : i32 to index
      memref.store %10, %1[%11, %c3] : memref<65536x4xi32>
      %12 = memref.load %1[%11, %c0] : memref<65536x4xi32>
      %13 = arith.addi %10, %12 : i32
      %14 = arith.cmpi ne, %13, %c44257_i32 : i32
      scf.condition(%14) %12, %arg2 : i32, i32
    } do {
    ^bb0(%arg2: i32, %arg3: i32):
      %6 = arith.andi %arg3, %c1_i32 : i32
      %7 = arith.subi %c0_i32, %6 : i32
      %8 = arith.andi %7, %c46080_i32 : i32
      %9 = arith.shrui %arg3, %c1_i32 : i32
      %10 = arith.xori %9, %8 : i32
      %11 = arith.addi %10, %arg2 : i32
      scf.yield %11 : i32
    }
    %3 = llvm.mlir.addressof @str0 : !llvm.ptr
    %4 = llvm.getelementptr %3[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %5 = llvm.call @printf(%4, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
