module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c4096 = arith.constant 4096 : index
    %c1 = arith.constant 1 : index
    %c7_i32 = arith.constant 7 : i32
    %c2_i32 = arith.constant 2 : i32
    %c21_i32 = arith.constant 21 : i32
    %c3_i32 = arith.constant 3 : i32
    %c89_i32 = arith.constant 89 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = arith.index_cast %arg0 : i32 to index
    %1:16 = scf.for %arg1 = %0 to %c4096 step %c1 iter_args(%arg2 = %c3_i32, %arg3 = %c2_i32, %arg4 = %c7_i32, %arg5 = %c2_i32, %arg6 = %c21_i32, %arg7 = %c3_i32, %arg8 = %c89_i32, %arg9 = %c1_i32, %arg10 = %c3_i32, %arg11 = %c2_i32, %arg12 = %c7_i32, %arg13 = %c2_i32, %arg14 = %c21_i32, %arg15 = %c3_i32, %arg16 = %c89_i32, %arg17 = %c1_i32) -> (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) {
      %17 = arith.index_cast %arg1 : index to i32
      %18 = arith.addi %arg17, %17 : i32
      %19 = arith.addi %arg16, %17 : i32
      %20 = arith.addi %arg15, %17 : i32
      %21 = arith.addi %arg14, %17 : i32
      %22 = arith.addi %arg13, %17 : i32
      %23 = arith.addi %arg12, %17 : i32
      %24 = arith.addi %arg11, %17 : i32
      %25 = arith.addi %arg10, %17 : i32
      %26 = arith.addi %arg9, %17 : i32
      %27 = arith.addi %arg8, %17 : i32
      %28 = arith.addi %arg7, %17 : i32
      %29 = arith.addi %arg6, %17 : i32
      %30 = arith.addi %arg5, %17 : i32
      %31 = arith.addi %arg4, %17 : i32
      %32 = arith.addi %arg3, %17 : i32
      %33 = arith.addi %arg2, %17 : i32
      scf.yield %33, %32, %31, %30, %29, %28, %27, %26, %25, %24, %23, %22, %21, %20, %19, %18 : i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32
    }
    %2 = arith.addi %1#15, %1#14 : i32
    %3 = arith.addi %2, %1#13 : i32
    %4 = arith.addi %3, %1#12 : i32
    %5 = arith.addi %4, %1#11 : i32
    %6 = arith.addi %5, %1#10 : i32
    %7 = arith.addi %6, %1#9 : i32
    %8 = arith.muli %1#8, %1#7 : i32
    %9 = arith.addi %7, %8 : i32
    %10 = arith.addi %9, %1#6 : i32
    %11 = arith.addi %10, %1#5 : i32
    %12 = arith.addi %11, %1#4 : i32
    %13 = arith.addi %12, %1#3 : i32
    %14 = arith.addi %13, %1#2 : i32
    %15 = arith.addi %14, %1#1 : i32
    %16 = arith.addi %15, %1#0 : i32
    return %16 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %0 = llvm.mlir.undef : i32
    %1 = llvm.mlir.addressof @str0 : !llvm.ptr
    %2 = llvm.getelementptr %1[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %3 = llvm.call @printf(%2, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
