module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str0("_ticks: %llu\0A\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr, ...) -> i32
  memref.global @arr : memref<2048xi32> = uninitialized
  func.func @loop(%arg0: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1024 = arith.constant 1024 : index
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.index_cast %arg0 : i32 to index
    %1 = memref.get_global @arr : memref<2048xi32>
    %2 = memref.get_global @arr : memref<2048xi32>
    %3 = scf.for %arg1 = %c0 to %c16 step %c1 iter_args(%arg2 = %c0_i32) -> (i32) {
      scf.for %arg3 = %0 to %c1024 step %c1 {
        %6 = arith.index_cast %arg3 : index to i32
        memref.store %6, %1[%arg3] : memref<2048xi32>
      }
      %4 = affine.load %2[-symbol(%0) + 2047] : memref<2048xi32>
      %5 = arith.addi %arg2, %4 : i32
      scf.yield %5 : i32
    }
    return %3 : i32
  }
  func.func @main(%arg0: i32, %arg1: memref<?xmemref<?xi8>>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i64 = arith.constant 0 : i64
    %c0_i32 = arith.constant 0 : i32
    %c1024 = arith.constant 1024 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c16 = arith.constant 16 : index
    %c10000_i32 = arith.constant 10000 : i32
    %0 = llvm.mlir.undef : i32
    %1 = arith.andi %arg0, %c10000_i32 : i32
    %2 = arith.index_cast %1 : i32 to index
    %3 = memref.get_global @arr : memref<2048xi32>
    %4 = memref.get_global @arr : memref<2048xi32>
    %5 = scf.for %arg2 = %c0 to %c16 step %c1 iter_args(%arg3 = %c0_i32) -> (i32) {
      scf.for %arg4 = %2 to %c1024 step %c1 {
        %11 = arith.index_cast %arg4 : index to i32
        memref.store %11, %3[%arg4] : memref<2048xi32>
      }
      %9 = affine.load %4[-symbol(%2) + 2047] : memref<2048xi32>
      %10 = arith.addi %arg3, %9 : i32
      scf.yield %10 : i32
    }
    %6 = llvm.mlir.addressof @str0 : !llvm.ptr
    %7 = llvm.getelementptr %6[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<14 x i8>
    %8 = llvm.call @printf(%7, %c0_i64) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i64) -> i32
    return %0 : i32
  }
}
